'

<!DOCTYPE html>

<html id="htmlMaster" xmlns="http://www.w3.org/1999/xhtml" lang="tr" xml:lang="tr">
<head><link rel="stylesheet" type="text/css" href="/DXR.axd?r=1_9,1_4,1_3,1_2,1_8,1_1-yDfd9" /><title>
	anasayfa
</title><link href="http://fonts.googleapis.com/css?family=Libre+Baskerville:400,700,400italic&amp;subset=latin,latin-ext" rel="stylesheet" type="text/css" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" type="image/x-icon" href="favico.ico" /><script type="text/javascript" src="http://lib.cbu.edu.tr/fancybox/lib/jquery-1.10.1.min.js"></script><script type="text/javascript" src="http://lib.cbu.edu.tr/fancybox/source/jquery.fancybox.js?v=2.1.5"></script><script type="text/javascript" src="http://lib.cbu.edu.tr/js/jcarousellite_1.0.1.min.js"></script><link href='http://fonts.googleapis.com/css?family=Open+Sans&subset=latin,latin-ext' rel='stylesheet' type='text/css'><link rel="stylesheet" type="text/css" href="http://lib.cbu.edu.tr/fancybox/source/jquery.fancybox.css?v=2.1.5" media="screen" /><script defer src="http://lib.cbu.edu.tr/js/jquery.flexslider.js"></script><script type="text/javascript" src="http://lib.cbu.edu.tr/js/cbu.js"></script><link rel="stylesheet" href="http://lib.cbu.edu.tr/css/solmenu.css" media="screen" type="text/css" />
<link href="App_Themes/Theme1/Access.css" type="text/css" rel="stylesheet" /><link href="App_Themes/Theme1/cart.css" type="text/css" rel="stylesheet" /><link href="App_Themes/Theme1/Content.css" type="text/css" rel="stylesheet" /><link href="App_Themes/Theme1/flexslider.css" type="text/css" rel="stylesheet" /><link href="App_Themes/Theme1/ImgGalery.css" type="text/css" rel="stylesheet" /><link href="App_Themes/Theme1/Master.css" type="text/css" rel="stylesheet" /><link href="App_Themes/Theme1/menus.css" type="text/css" rel="stylesheet" /><link href="App_Themes/Theme1/pnl.css" type="text/css" rel="stylesheet" /><link href="App_Themes/Theme1/Style.css" type="text/css" rel="stylesheet" /><meta name="description" content="anasayfa" /><meta name="keywords" content="anasayfa" /></head>
<body>
    <form method="post" action="./" id="form1">
<div class="aspNetHidden">
<input type="hidden" name="__EVENTTARGET" id="__EVENTTARGET" value="" />
<input type="hidden" name="__EVENTARGUMENT" id="__EVENTARGUMENT" value="" />
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="1DJ0VApmHB5BjxLDlD9BQLGPbycIBMedRCx96YZMZsF/ZHhpMs4zpxA/stvQTMkasizVp3G8vXW4koR4qubmg9ewmcm1FmVEzhIWWe49G/H30m1bQPRRhmDjhNmAjsXkJ3G6vL6zKCzOslkKM+9a2F4qI4rBQD2f4bFIUUlFz7y4OSwkS/s0u0eGOlA/Geyz9H9+bYHUcHQDa0bv2IFkiEoBA6JHrShT3GSlIiTPwK/Ue3K+L0XxZYDOyvl+aWJXBWA0BqL+lMz029TavJgWwFmvYHrkYHDMe+rzB4rxZMH2cGc/zbPC6UMtSkp/vcoQDZA3Z94tFfPabxgietCLy11jkdCl9Y4/8LQwe5ObCiRKrMSr9ult61HE7ByGyZJ7IMkFYcet/djRb6QqAklIH0h5j3vyeDjDrb9u33qJ/pogmZBqBJAR/LuaAbwGT9m6SGbkdomg++TXtuswTq/eIlOnW6LuUq1c4IdAfk+xev+PiJKo7dnORGfYzAsapkF8Ab5Ska7VbE3ZwvBtr7Vs8A5Ss7MrIQlY4ohlPUeBsLns3pUOYYsRWge0SnJQpIDnTut+xdoCLBjVwyVagBipeEf71j8yZ+atsGDZP5MJj0h9PLDI1YevmrmUMS8vq4dr5xTbh/wYvvs4dAUydjvSHjmp/Y6iGmskkK8G70rdCaf0hHeQ0jCgdW5ILq8Lz6cRGraFFUuzVPr691hHywwB7fd6dOehtsdxdbuCh33Iff/YnIHjEVdCPtASZABEhzNnn5jOS5EwG37YoDZ4HSokkkWF9ICwyc6JvBLM3YEoD8h0ff4L3EPu6f6CUUhRdNmfjQQequmTXor40Q65KrHeE5VAmSi6m/I2r0XO/JMwbjhkYs9qzPPCuj3cyjfZ5aDCJcEaWrDUq2zpDQTXzGQ8yRi/610TtEVpMpHKnQmQuTdU9v5GKtXK1YZngEDH8U4TKjOwCyZOUwaoYW1xyfq92R3phlsaxJ9KmoAgkvImUadFQzCrw7K9uoBKZNLwP69v4gCtug+Va4WPD6t06n3Qrl8x8eJiGtR1oOLxJhXpohcBdmnsoFMSAn0AkO29cbiwv3bhYd14zLOAPMIEmu445f9IfH3V1m5rkfhVvFtemnoIeidK7ERTxrbOU/vXSVYe0bULaLaVMSlfCDkhsds0gpEXx0REbCalJ5kp1wd5dlsvbNgdxCho4tn4TwLAbB65U56ICORL/DaA3mB+DMD+ZOfNOV4IihpGBK+n164POECj9qhAMNvrZg0obEv8EGLZUvrtCIt+YfrEC8zM8oiwKFIjz6wBTdxlOMgBsikfdGx2s4+18TT5bQ9flty6nqFwKd7GXs+ufmcnJTE57PVrnt24MSWGyarftsmnGUcg4wnPCbyMHkfIcST/EpunVNKSjeurm1RbuHNFKNb6Cljdm7hpPlh966+fj6zyg9ts75vd4G8dePm64rlBUQb76Q8JNh2jVaautGceaoSLIgqiRCzgIFYTHjb6elEBiUh9nhNZCILq1rpMasNNyCzScV3Zq92SLeiDoOoBwWnyX8Fw1/emfmOmqk14U90I0kqjsBFJaTEGH20jbhj2ySCrJsnUo9SvTMFi6PGWptVraWsx/m5H38SEt2l8G0EgIQp4MGaeeSWjSOrmUo7Qnn/O48+3QsfwLzXC5JriOADMQzL9ggxlHK8CivuW98b7CD3m/Q0se5h+jbCMHj8mUE3e2KjFZZ0SYYCuY54r/JtY8L1XR99vVJ7R0L8yxa07ECZnJYI01MEVSbrqy1kEFW3mAPM1U95P4Qx4g1ROQebi9uSqbaSpZsai8rTRGWrwhsJyNNkbIHhnCcHlNmOotUEzQqXnap9j40JCOxFKc9ORAx62ZO1KcT+d9mhiZIEfDUYdgrBI7fQjLYuZW6xTCCasRBwbrGVfWPspR5c9C2i1vImn+avdiEP0FNzfpQMH5dy4Wkpb76v+AkNc5A7h74gIWXOohMaR+jqHACAiov1+S7HDsJ2aojvajLPFnBxB3u+H5ErfCnziQOoMGW7P20wGDKNfW+e9BfaAv1r+3E7HZj8XeeHIUCoRSE/CYypUffFQut5pXAUmf+NPUO+wPAnOKY6rpEm6olVn6EMrru3eCZ04d4Y12n0Qw5jAuAp9lqKgwC0FYSGds82PCfE4yJM+0uxC3dpr5TPvnqaph9FUBIsDU4nDcd4e+sXP0SfuU4f1GB7jxAbeOLZOuULY8Y3baYguaZvf/f8Mc4mzjH3AdAcXELyrIKJCmmW86ehadahFwVU5/K1pomHMR9gCtuZj+s99EvlJx3gEYQ8S5UplDF0sF329FAMHMfvIsspRDJ1MsNN9KvvZFD2O8BQ0dI5py9QoOaV/PZOxnfmVrES6UjiTarT4aSD0fhVHvi9Z5Q2neq3iStOhiszg0g5eudbaRGcDsB1nY+w074Ieq2Llae3IrAVmx0Xh8guHW2fHO65+sR8Y0wNep6LqWSA1gJXHg+gFg0YQNQd0IqpNLbJH60+WfxA42GQybuQ9KVdXkip08pjB7ZOuqkR8ssmfcSWNCXO/2C3VpPIiMPGfPC0xpMnx4/Uauz8cW8LxaaWN9Y7wT3RDcpmatg4hgdGMNG/osDivx1cQU+RKDUFi0te2J+jX+WI1C+iWhfseajaA1/lpxJrRvIlUZHA2sLaJ2MKkrfvqvJZjHzdOcxZYnfc05U5dwYdN94lWSwb/bJ96QkfjUAhKOppuSw8XK0U2gIGjvzFbhL11Js/Th5vxdrySu18TT2euuHWQzzLqRzTBG1cWFaI4/4+eCQ+o2pLAUeIJ1PZR0vXqzjf9ngVD00cPAQoQBL5uvpP7uaCN3iiM64aZAhiw1422VaolVaE2vtHfjoTyUcm8HQRpvfew4IoB/7dWrGE+bOYlkmcRQ5jIN582Pxsw53U1HaLXLi5NVQFiZY403z7cB8Ysb64c2WnEZKgYx7zfcPAXhFVypt7DYq3blp79ox2SBddPWOA1gjX9NLy/qljTvUoZrL48C/sjsV2gPsrl1lbIcvzO/ko6fd5Y4a4uqLCJhK7QM+hxQa8GOK4MrjflVZ24u0Qk2q2d+Bk9bVef+RsrxwNXAm+P/nBHlesOVfl3U9800mTmetiox/CDuxVPtE0cLXHP1h+ySaVGOP4BFwvhW/ixTEoQCOh2O11SXay1GsdK84DBRg++YtE1iMYoGiE8N1xSeISdipw6iYg/cabpLaRn92aKMa0PZ1/rtc9tfv1vBZG5S1OKpZRWlo/Z+8hxEmNgjSuNORo7vGQgRF0KxrjzpGGENx+Poa52W6cqOqf/EWRWr2xCiPLCCLts3qGxL7HMHEG2ItGYkTXopujdtcr60IC7070vkcFejxH33+EEq7snTwbQlkyS/ughqUKyydHOOtpCpsZJ5CH44SVR85gZozOEnodnakZvDhcLqQ7Uv5CMZ0ZV242QdcHvtJarg8N68U1VZpIjYUdOBKbvo3oyiK0qV1c1/cN2NOwAO1ox/dOsYJMmKJ8rsgdcy2pUySAjsIo0rXqOZhRfYBxF2ZUoSL4/sT0irbP9tOLALPKapkgufSWyLxnXFPBn2WrgmNp3b/P2GknxP57OOn4toupWdK7byWQWMquOjTZGsbwQUr9/JOA6dX3m6/dvmVJnzC2uecUKw85QM1VHf8WYtlX6kQy6EIKpnaJxmYn7G4cX6Z5ZXSV4FG8CqwkXniobYgicMNAv6RrXPEXs5Jd17/sF9lHAsTT+Og1l0nI6ppt0sP2Wil3FTa5nIpZuDa25tw3asqsu5N0uebH8Qc+k6GO3rDKj3qCYkn9kuFx0A5hp7JHgdcjOOQSUMc5n/sv0BB795wNVkVBrU+4TVxLdtvJ7KS7uefYatW5nx5FLJd0u2FWEALI4lVqT3QiFCKVtkr4n2Qy62VOcLoSvLhB66svM9YFHfJ6HcQtmnYyBEDevU1O5EArMj1X2pqeSTPHvv8NELF468Uvcp3/DimvMr/9ZQZrcCopxf+DBzJpXEwSI+JZVF4a2lGKPiYNrKjqP2l5SMConMWLmLZKER+bqebATGL5Ws1TqzrnL8by19t6Pz0/eC1W+0yWsNCvtZ/tBN7n3sWBDZ2iH1Nd6J+J7MzFCntw8cOJkXYC1RdzcuBrBy355jgha9pFG/YefxsRZlaXvv5CsayRBWu/QRO0G7aE2rvUt11/2VUURElXuGlMDes+GBBZwCgyl5PGPi0ErhbNJWPs89j5rthotjnAzJHcch1h/6fNQXpBrQMZkiGqDuv0yYd4XdNLnvflB3bjSGiidAHsE1E/XBj4DOc/e4+UeqCO3q7CC8k5KYzLNcqQGeTccA+YORZvRyV6tDhRu5Sasv5mQqAZDtbrLYr1Eddn8wWe/EQmJE6O6NEwnoWDFK4kD6+rIqFz2Wo8fCgMM+Be2BUfErnz5IOJQQEiyRbX3qov2FHipDA+JgkQb8IcW7BYUneVchlqtO4ZyDbIVNe0PezU/BdPakekd+E2jhBNAh/5SYdFm6zGTFVHmr+/fdzK2hcnTBCk9D/peIfWOYjh0gKSjwGvgrpdPSlMAvi7CjpfoUqUFhCB4utGLUY5WJCCp4dG32hZzhvaf209v5qQAdecDrnWtAISpj1nJVhnh5XaRwZu0L9aBMuKJ0NJpUQ4SdM6x9qs/oqH1RnumH1o2uxS2Fw9XRJ2m8VDSkFQTY1mHxLY3mmWwlRToZQNVvARTiVw7ek1dmBp9uyaP3dBtQQLaynp+zuqQSa7uVnuiTnJ6suYX09nS4wru5KWZvHTEQWWLMKbe9cRB4QY+Ihi4u74FzsQgqulWTkMfLXTjHioP9EGtpqjwml7FphvVn2kqvNH/uNNgcPK48tsKB94JbiZ5BsmUrUwK1h9fdA7kgeZyGwqtmcgOpL4CMnWED/a7wqqcHxaDqSsT+Yl/36ta3noHmyOyCb4gAV5jN30vLxh7hbzfV9Q85f2LHoLuo7yB4nwszr5tFoCRdVllUA1auftwT9JqNkoBSsdSXRfOF2siFyYlfj1j6m2PUz15v/1wOSGJrRuyYPBh8puDMCJZMUGcw0PkdY9MAjvw5RO/0Efz5CbolYkj7pBE1QNvEOpXJ/6F1PHxwzwU61q39nZ4hFKf9pf69FFF59+QgHaX04C0VAGhZlnVs9zZ3eUqdcwGtfgqG80WSPJRnrhB25Tv9SoTKo9ImdzWU03rdJMZn15l6thwlX07xHtI1VfSiZUnoNOe8Xd6+4wDSeDWNUHCuGE987WA+xoWR8gRauTnNe1k+XjmYbZ4jbW0Shb/zFP9r/owHIJCsxoo4imwQQCFDLmY+JKJAkzayEMnt54YaMT+9ANpGB8g0rdUSBWUr3ZuAscn6t4aBE8lP3zrftbDFNwhyxmkr6bY9z/cFy6YKIjj7AuICQR/dNpgLLhKGgDHi+RYi6vDC1iSdFNVREon9agsOWaBAP7Je8IgAVKrmBoJuiSAeOv10Fwrp9Ld+kKVCVZNqz+KHJgdjctuSaj09pUs1b9T+F+xHXrz+IajKtpoJfSvVvvNDNLWEwqzi97deD08eW7VdzKB7VCesgyCqp3PTKkmPNdzrWJH+H8S5FNIphW6rWc0FxPC8LrT4wqbRRc2XaTJqg+WhuRQP3jfJThVt6N6Midhotk1TQVFhoNXD4UawZ8BO8w46eTDiFZkGXkrD/rYwcm/X0L8jWIiSVisqQItAAYUf3lHkBmCLpX5sOsNLw6LUi0goeugGoFYwvgZ03aLgr9X0oO0VIXIXBl6fRFAQbMfjRUQO80WmqigfvFz+ZTOioFBu+ZxObWeGCAKMaL1qDLMQJq4Bs7fEY1beopGS7ld3PWqSyC8vyOlDDmfKsYQwzXxhCwhahsgQ8O9y2EzSLXvwd8GiiIGfkOFEe+HRqP1V8icNAF+X7IY7iziIZS42NJlceuwreB2rkCwa3baCMRlT5Xzp1bN6E37tFniqh1jWB12MUZ7um3eGRrOXl19XqjW+dN47IJviE0P1QAUap0nzn6nKc1vfkP4WAFQfeT1bD/6+Gf/OIfC4QpikB5uFjwStd9+B80EuY+G3dxtFNjLF/PycVdLHvGYilvUI5yCyxVNIH4/sWCTpO8xRaOfiFewTuVKYZGmWRGqcrBWAkuPGTuiOyOYLTmyWvrApfqXIHtybOZGo74aAhagaFkrx6P9aO4OFPlKUvYgJylB8M+7wqijVu/cpzg+tN7JnxQIH9DTCCLrvwNrcOQgoO4Rb5czj0o2Iyio3ilrBYdeeXeNVzb9T54qiZlAguJF4EcposK1LuOafaHDvcTDudKHOyzO7vDkHAI8Y6JlIJYy8KZmBiVXremAon1gyv6jta2dVx45K2f23AEFt3pmp0YgtbEw6nrgaF9NNud9HvG7wZJhawXW+y0z6fhifbpOjfqkFH3htMJpCm8mi2EYj+diD2jlEDPGhcDKXVwwVs1IObd/gjIpqkCIdHijlO36kbXvTMadB7tahDi5PP/UbAK02WbO+kNFIzd9q6cv27ZQbrQPf0K/7FnQNAw4uMlnfD9OraIyv+f05daVCJgNN8ypQq8XwCBq7nI+SJk7BBfrQczlsN48ruKnoCkSr6XQ2UdLVxw4nR5W/pYqGH87H/rl2BFHS8XXDYTNzwKyw+ei8S/TuyZBR31+Wtom0WeCzatT1mXThCcgzM4LINuyvAyi+XQEk/CKXNZuZD8qDtSL4KI70625APU3GF2Xc1pBInDeAHY4qxdXtjVS2z+5t9a5+D3lt0fKUqL4yDI2TjGjZIH2N9OaDljLolCxPpWyE25WB+wPCxs46J7c9ocRK8+LmUlpVdYxh1IHgrSeGk2yT/mpoqauc9OAtrjQsgioDHvqaDCwfQxDLTFBKU4VwZH88OMEL1mXMbcYOC4W8EAWcDTBXN3HFZcT2OC/vsaNXN2fk/6mYJJEU9fGLjSdS04mZpQDboE8Vd3X9lqBRzczTHvb4IfLLxTBo1rJDtzoiACVei6uQD2ujLJDiBcVxQpJNUoe0optQSvgdY5/0INvhbPqw+sYroCcprJLxXncnt23MxtZFd3Etxrc3gMHac7Wr1BHIpH0tSCTwkNR6BhIRF1tFFgYK3qOpcd2ZUAHyRs8HDHx2d0lbTwDLTP13zmL9kx+xbta2ZdO7Jx3sM5ECP1zl2eDVJF1LHxMzZUrYkGy0uJeCG1I6lZZh/uKBIf9EFXKoe6maBQFOYsHLUTOF/HWytNebBGpsv3lRzbRLZUholpZ/V2iz0L+4Urcaf4HFa2n71hD01v1EdZ3KBCKtr8zLv+BZOiDaI9LHaUp/UNkWtXoeDY5r4FrET6fFoLfdj/PSnTKaPTXfhy3AYxO9abTaj64Zz78hjJyjX+mWOSnIvWiuNjIve3R7ZFibZrov9bchOeAIzUUl3QeGxM5t9lkOQ02ghku+EIJ3Ugpnb+MJS4/Z5kzPRX9uXeulwekyflbmCycVPrMkvHt0H/f2rhXupnWhlKjC0TQYt1I4CHAGOjtvRtA8pUz3CIKxjW8LpsXNPWzk1a8f+vWhiKOSDUjeINZuvMuC021zqF3UKWg/e6ETND1S95GAGr5T3dKap2x7x02+B1Iby0zqFPhxeyHB7tLehiEIgrbir+ncwRnHc/rLTjArssDrZ+jPEQmjUYnG46Cese3cwqisU6UaW8/z7oLYUDW6O7ATFyIzBjIVk5qndHKWKAl1eC15ofBK4X3aFXvUQMuADcRWXEHe/2+xt1Dk0wqX9ANnNAdK8GshMDu0CrdrkYk7i96zl4+xq0N9/TdOES1iFx3bP1CtA7smR7/8uD080F73xw5Z15ym8mME0rVSFxbLQkzjxJT1aeeSiZMl83EKBusJHqeAqn4rRe5SayqsO7f4aXc8NauguC0MX9zUuxKlkO2JvVHNF6QpkL8xbVH7P+T7KpKS79S8fL4VQPOpWOQANL9ScJMWOp/qkUR9MYmtiIE8u408dmiAnxPAAWT3Tdw7qD9XhZcVCApWzxpXCeDUaY3cINYcqnU0XDdqOWFLOn70+KybgqTt6eTL3qwY+X77yf2SN45qa3LGMTHMA7rH6zq2CGtOx6whhPJ6aBU6AUy94ce3goE99mQxOKeFXwHo6lX9Pp5VtZ2KIrLUCQieSJRZsCpdg/znYwZLA1wip76aIruUGBpnIp+ZWEB4Jz06yoYtiWAAWdCL+eF0aXPNn3qcITtugaqjGNGMalywVbhX2yYQ2I6D17rMVaYEqB0dqybd0wc0vi3LNsDfWrCP4RuEEuDXF+LbbmaSGgEs7hA4eeVC7nGoE0bXEGb6iPmw0ygyH6Fqa4mhjHnyfCD+wY7uy0iAs1KPPLBlfFoRLXP0sYGp+39usiJLCFm1t3kuBr2W+DZpm7PIJZ3he34ekyndh70LOGbjXdJR59Qqu8nWW3M+ZUjt75MNJgTMz7n7RfgsBurca1khyEoCShrmNInH+Mj3sSKxcVDxNI5DpWMgdQjcIDblaPB09oafprD44TKhApaVwKayR0E0H67FEFzxnNwW2CtHQW63Ccj8+td4enxdloc4rXcGLLpbe9uffILIhrJNHlmarnXbBKpC1sd7yARPsqul0R3a6nD8ykZyWbRLfynaOBXTkaBZyj0WOh1QldI344PdPYYfzC4+mhS1FK0lhptQb7ZhFVWdo+OYeMv/YGl9afza1f+mm7WSdUrjKtj8iiml2l14uqlzJzkx9C+C7i5M6IV2N02B+2eTVvf4VQHLW+e2y5hh6DVS+xdMyYlekysJAkDo4bHkq+6pYZSgOv/tokqHAtvDWyzo3Ywa1NT7CZQdagWygvxDwy/Sljl30cNDERmwtVA+RU6i4wlR42eUfPyS/SKLfRlWX6wXGhgNlYCokRbTESzZK7nDj43lnnjv+5qSagCqTcmUf8aKxalezTvYyrBHGriXdISzYI2kzzCCzbG/C8aw3N+anX4mzF3iFWotuqUJmCmKSPxiv5KO6X8IFcu4xMsPJ3tp/kMgj1qSkT3tlPr3O1vdce+8Sau2mZlySLNXPZowh7VKBgHxBsBXd9+g0tB3eKaFNNy/nwQoZAoYNvPOfc106Et68to/HDghzVr9RbB7KM4sneaUNHE1G/H6Bi6S9rQpK+M8mb2p7tTLv0nC63AfTFepiuQQ4AnGh9r9mRdad5Pw5vsyVX6Rn+6vBVMBJudEMpkMTr9/Xj93VF9VwgqiFbwXPPdNyrVqX9b90Tx7aAUjwJJCOGifczAc/cDi6C6RpoTKYvAsOpcfdAW8A2F/CF3DnP8huiNH51TKLf7ERu4V5iIQqRg2qKwM2qSolShWpuXeZnYDLQmq/6PuaVDIa43rPrU4c0mmyyvwwGKgazpmeXd5MkWIW12MVCoiLirIberTAwng3Le7PvVvPxiXDgvrIWu8bm0I6b9D2K1VJ24B0ZstG8kSoKpXwiKI0y/8WdDU9Ri9xflfZhAzQTJD32abPQ/gQY9b6zWc1m9UFjB0eyxRs62gefAOYSGEbj/+eFWG82oGbhQDSOj07Zr/ELQZAb2s8yi7hk6M+xewuyEi73UEJ7DHhv1+N4aDlLwnvWpULNgb3a7ufde5t7X0r0aey9Nu3+WatslaHK5q6j5fpE6uLyyWN+BkXrGMb+LX1CMD6TYlOreGS6Y1Nu8Mz6CmOGjV9t4Ra0jdZGBIGgoVK6mnwMfDFbjtCHhiCqQtwOBy2Krj5hGQudNN6CFHFyHZCci2671+UiYt6ag0ndEMXJwhoMpWXfmX1WJ/35uKmaMbT15jf8UVi3a9f3co5P+OnuBi+3Lo8OxyHPQ0XCKJJmSNLRAZjoACiZgk+79wQ+EkpG46nLNMiBV3e/t+YVb/NINKOPJqktBSfeWrc1ftItV3lSZxW9/m1+nQIhh563b6uwlbHZM+Cx39AAMQeScYsEsLdRJFfrTdurVrInWBP3IYLwTrCHs1Rfnut3dXSu9y8SJT1toW1uAiPknFKhd6KwCG489BaAlyAGmbuCCNMt4OPP4vmHtaYdZcO7vRr1erixTO+FrrAKjv7REoRlpjuqcnUFOeLRP0cK2oe8Io4tAg1YpzlXsVAv93/5oa39WTWmABrAhKKFzbWGabsHecQPP3NLaNnbnD/pG0DPEstXwPh/o0AlnKp0rntxCIGpIMQTxBqZadWn9aEEY8VFprjuj00O4P/Du83VtsFGwQBaLPCiFQzeBKmtplHzmxAd7jstxIZCHEtAikgGqSr8EBD2fxoUC34SX7eJBIr3CpT3R+YJ9gofEnkZpEChIKLjEWo1OR0xmrvk2uW5ikR1cHHVeaZp2g3E1jFCfESk14w2MzAaAVJ4wBGv1/7yoNNSY7i9J1+vJKkjatXHZdrq6H1BLxVUTN1R2XDtYS3kD+Ee0VBjoUp4K2Mr62ov3tNwIHW2vpKE36Moqx8YYkIrH1WV+TynqiDDE3TVZyRNu3yXVcW76UuuYL8OIAQTJqHokBh2PEDmv8D0jhwCdGd01g6VN49jFxWtTrhSVywmIl/29Yij6xmzgRcyG3HL55SqihM4krrmQ9vRwSjTxG5R9S+ByJ3GMVWuv21JZwSf87JAhOo/nFqb2gzK07MOAvyQfIJl25xJThog802gRYlQKwHggmLkGDh4OJtdKx1ITfhk3cIyZK3mLnoGhtURW0o/f/tE5a8haIr2ze7vqrPWrmpg/ihpNqp+nsiyq685tlN5D8oSI/HrarAOpvuhJzI7Ft3Pz4f8wLEIukMFjh8U3RRKNL+FeJKrn3trIHURcqURyg8j6z10HYkr4Vm3+7EfOl5aWZdPQqZfIFC6AleJ71Ts277aVQnOxOWn7yjbUdXBIf2nJy2Dkk/0xPfpq8djW9HYqE/dwQSX72FzU+VvZdxQ9l4h0Du3GHvgbvFgufSUGzSLp2YVzn0NpZhsk2JI534nzyWUQf4ZlnblUs2n90q2/4Uc3gSm4KKSfR8U8vwtROyC3ubfjLPD52inHhpkmK+H1fvWasGi+VojCFAtKINwUlPWrD1fnpXKNSQvrexz62cOitlw4X7Cp3VXVA4EloOQwKyOKFwr1sPLALcLJeNtc43N/OKKemfTyROFJwALg0/9cjf5NfAoaG8/Wp5RJHpopHFHaERCQLrHcL5RkbrlyArJmhPPBhmxjoCrdB3a0Ae/vSO+A0IQ1G164htpbx3VeOUywrhkR23M/65n/8qixjbmY0oewGKJagDM1xWz5Z8zNWmQkc+UFy9k6jy5iTryeDdejxcBKO5lZJUROWCYBz8euM5n9nmz2Vgx4Nm4f7BWJ1WRjr4xLKjm6CDoTWR7+4Y3mBKovVheIb9LxFWvx8+MPzqlmIbmWHKcSPrbpZzSbFQOPCuLRxlQXGFomxfmV3pKgGYsvC+huZdT4U0tknI+RLvUnsMyboNLQ6x9gB7+TgIvwFsjma349yarH7X6VEByH3/3yTWUoQDo2pz0ARWdVfxFfh9dlNMfD3KSAgGfQY7YHhtOrjtNFUkrXmVkfoFTMXxXzNt74f9ZzJ5jQv+exCrNWvErzkpvHNuzkbfwZ1v5LaqugNykIG1HCHT3s0jzdY1yVzjU0UAPvNmwZSmVHAN+5GX0IkDTs5lg2YvY8cCweIwWCeEW7ordBXp/7eOMFvYbW05ELrkAWwcv1VYf7boYNDcVN8JAaijReP+GxjnY2zCyw7be5eJiaILK9quYAjbya7Bu03bU9+1TKHpUurh2zDS0RSRsfUS60EvvaYIW2lxVM5Dzpi9TP3r5kctrjuCgbTXUfSp7H9PZnWaweZvkt9ypOnUwTgChjxM1ZpgP0/Ti1XOe2Wf//TGrWWoaAe+JL8SrpFAP/vfqrP1cU8Mt8okYlP0S7ClFXZ1dnBetmVcgofnjOcZIqKGrItb581+iDQUymOd18Sop1hZDgdfiFYOdCf96lv1+hoPNmQUVEXBKare6XRuONRoLIMEe31GiLp5fAkIqgUOUo0xSczn7/R+bkIeuEVogBHoQNAtg469CCSUpneelU1B23gD40umy2kEYZZK6J1Zsk1VXDud1cFU3zg7g2rqUoqp3uE4kCI4Gu15ftzoTSQ6vWiwSfuJX1a8r7px7QVNZi6LhZU+IWaQZogfJgpbI1v89mmTgarNK7m5kV52Xv+/v82bxboo6EC1b/A2JLMLcXL6YWetUVPt43UarVqCcsH7CL4GzmSAIFaW5h2Rnl7TDQrai88aQLtIzxBaXs7bU4NXDLJ3Y0wM5tIjubUPTkQi32bxznnu5v3A3nZGJboKik3zODLyznfrpDaa6pLyHadUf10/mNytCKD+mpdvii4FIlGGY4jnYpPvIZoEbYiTqbat0fIjeTLF9PDZgjSN9Fgre1w00yJ+lZUCh1i/ZbHDMzox36RLtRlibDPAln0YxzOuMJVHRbQ/enFf21uA6VNQmd+UwFJpqCwKznsksvCH4p70nF43NGDdTeyqu+uSvKN4d/TFI4GsgJB42raEUUyGQJAgASeE4w9O3gkeaQ1R3FQI/EidNkGOJ4Gf+QVvL2dCON1UHjkT5XYVWjGw+X5gg0kjILlGg3tAfNEpIVXY8x4do55/jLjQJelo8lN23yVeXwgwisV/ZjDZqI3985ZnDYUBktwCfI+N2lwnbNO1uiwcMJlFSB65wHtnTrxgEBbuENTkKi0xMCfzWPBi0TergGAd98Xa868Cv+omVUvu85WX1fwugzkjub0Wgmzr+dK5H68QGFr9L0SyNB/Wf5udeC01oQ0tDutVUIt45JwWqy571YdGk9eXdKmh5oz5OkGC2Ey5pbyOa0weJ7ksAUoNq2m0YDmu2vgw0O6Et/KmMbAle4Kq9FyeYrffFX/b88RCfIJX2ABEWWCqF5N12rICV4QIIoiJqMi/YAc5cMSoUY+rXGEm9/XZ8sCitPjib/RIMhyBoybbhkbCa+rPkIeHqQ2v2/JwIJt9Av20gq7BXecYMvzsoMk+nJ0y57d36WwRoRMvI0uEGs/A3/NGoJ6485n2QtmAkFehxRF00b/9QC7jAfR+I8xR8Nmy/ny4E+ois269x634HvMDHtRRaczJa/vHmCMxo7D4PQkm1W5x4iJBmILV6lpowu9Kc8PaDvzLe5So5toj8tit2mYIyTQjMnSxcCAb+R4zr79TIg37Tis/OTcdD3IPhf/WcIN9g8nTUyTaxMkjx3IaGoZzYAxT4Lx9K6O4Y3GX/zoufrhWj8hXj7e6bV6lk2tUCff2GG477WB/HLhw5IkJ81eyyfpQexG9OftBWWOOCMAfijZeniXAk8zIr5miBswREELTaf8TXRPJmA0J5cdczOWJgLEz2km8RMjABUB0Mvzw2NEZlmHouy4fXFuJeL3dDFquZyOmLt8v682/1erivccRuHJMMZQe/OqpzkFi8YdUqP8xlpyk83Zef+cSmsQ+sRvXnVwUY0Ov/Q+mOxO+z0lfDkGxlB+gVowkmAXwJb6aZzMG0acfjR1rhlqnSt6phk7noItLJJjEXhME0XjkQFUFahKHhZ+jt9GWoTRiN+EuDG/Vm8rv72pjJnWmic8XoDmw8SyDgrPMvUUhgOoNmBImEsjrEnQLBWQeFmYqzD/Q265KOW0C+btEB18W5+153lzM4gs9Ty1JHqR6gWRtg9XYNgtWQfQ4H4ryWJZ6IcOMXHZOsmJL5jLTtz7syLyreuSXjlOM2EttPgRhl2GRI+lg03CaOlwP/cCSiwx26v6Bc/QXNPB6Y8QhCZg+V8IxFm/6nrMD89mboWqRSY6QCtIDkkPCSarsAu+PM70MpIFAZWhsOPzWYCVzd2jmn7njjeqMuuy4OzuLt0FyCTTOeRfEpLF35fPUJVwdR+gU64AdXFVPIykHXloZefEdG18WZKPdcmCjheK90mspgo0lks8MsqHnmixSSTYOOiztzkBthMN7RdKnWeiQvnmjwrS45vORhUYzmJn2tKI8k/7km5AipPJb8X98uY8ay2R6QxfO+gklcEiMi0DsH8R9fQtBqOYC6s8Fuw81zemT39AXtLf4d/Eukl3w+mAYY+av7Otz/8AFegbiuYglii9Aes3I3NTCSzF7sFanIzCyyiCLUKd0bJbnkNZ0WCiG1v8KJq4pFrtkIJvjf+5LgGgHghGVq8lnneO9ZzXip/pOqD/ZJscO8EJW+RmNNMwgDLl6oilfJFrBrLHeNpMVAnKJrx+BTh+BMrnAJwwsbzSIvuhwipUUPZLJgPOzah0KQKFi4xPvhoftaX2y4+2geOPSMuuvIXyr/325iUEGr3SmMIHORW2Ix0RgmugYdjNBZBdYFOnD4gMv1cVMX/XwDoEoV5MS+eg9biUA0PxE+OHpiewvYt5MlKTOiQlgVqDsYo7/EJSDkYgzngb9xjVuNO6pjYKCPhI5SrapnYrUqBum49iKlDA2tAh+411/AFjj601JAvXFnsSqGcokzuG/4bSw7HxBwxQPu6E9/zptNs32Dsa3oz3vqEAZp7slEC1qfd0A6bqhlBQivF574lVddbE2OVMwCIO7Q3OP+fgGxKgaG4UnTpWSChAPAnp1zJP9UaG37m/BFxQ0SJ10T0kjzCEvJpzFGaEkANcDKcIlDCfxn5d9HZ0CPOCBSUbUKnknnH53/K5mh457kdC7NtFASDa4y2fZvRlgwCVPwhxgh4uUqHPXmkQovgE30CSrqFqbSMqFb+aSo6O4b+0ghdY+KZjHF7kxnYl99RQWkbHpbSFSVpWcr4fnZfsE2tOblG+2jVoZwXAQdVLSIGUMG4rpJIZ8q0uinw/Z9PoNQrxsoYoylIFZpWHj2Ic5Z/LzkZF1MRTJEHBuou/ugcJT6H8KegBw1Dt/8RrGTq5zeH4nacR7Ra9ow2aKbuZc2VxoE2tss+sCSBjWs4ffpceDxJnuTaDvnfGlSVIIRvOqBG6/PQGNemsCdRxTkb0wChKfBlY6ZioDNor5heDcycJBP40PURXE5YxifEVQy0/K7xhKxVke1ZZLD62zmh4pw/5Aj9EAWvmrMNG7gR28M9C0Cfk7/n4vjAgXpzSi8WA/jjIVehBtQ+vsVvVy1LwXTRw3CXasfF84lhPCX/mm5+r207FLGmrpHXkJVnz/AbGv6ZGQ198wjGo/Xi6zQTLt/reBmm4EobZsoAB3AXmSEqNNcT8hMf7w8abEhm2iw9Rn7jMjTK660Fvrr3Kmq84R0ufORswmAn1Pp5Z006DCgl2DfTaJvyCcGCL1Dv5oYaO9sVJT5r7VoR4ZAgHv89o+7B58yzZs1uXTbLyrFDVZts0l+gXdzXKWNL7cG39K9C56lDZl1w3+yKH7qY5jdvYqerdWZ9AEn01AghzerH+KOtbuRrQRb/oKWq9ZmFIM+BLPHDfo8k6qYcKpZ7MYS6fvIPnVxQsKkCWjdGou8su9MIvt7G6DWNLPOwoGLKpTPcAAPDO7NumABxHlkv8/ZIArBMLZkYcAXdmZOOnDNEypbzZTBQ7yOn5HeUjwbQzf0iErjNdCIXSV3oGViqMtRTjvjTzPEbRmtrI5aSYjQybP1uK3vV5p5geIIguqP+6CdunRSRgsPOSfq+/BmvYPVWqlE3McBmUSCrf85pdZUD2TgdnLnXbzPKH+AJMbDFEGcMKdSbv4bHLTwmwTlEqdubjniL9dfUiM6IDFe7gVBzQL8SjfiPsuVj3zrZByuGsVxt6UWJSI7+gxe3J3ZRT3YlEEuoHN9Il4kChLZy124TMugJuU7PF0km+7UeZIZOHZAhoQPDowDcitcVUeoYistxNPfVWHjojO1t3qOBkApsUv8DcSeHfMn0YH+PokrZpi3quOEYg8KcbUunxUlP5QzwYSG4+s8Ln8H+4tIoFXq+xOD3QLwu5fED1EWLR04gUHpCwweYeUKvPMm0IIKjXlYG2Z4P6lFnYkAjjgmykJ1SUO4w1EASQgMgCo9/qNVFM2A3ZTfh2MraYrx7uLLb1A8UQ25kEtsjkCqdP1gzIug27QNGD3z+uauzKE3y2qj1KtJwHchYTEYwHNHPMQCZGVVrQuWF+CwTh5cQ8e/uUWkJjIQlz3OLDnrIfEmdElAqHg4GbC9D7k/tPw+8HtpvnhOy9+2WMGvJO2T2gEBXSGXxqwRWrKVEykrKsruaWWT1MhI8NpRbN+Avb7H5Frx5r+OG3WEDfB8Yo7QgLhJr8GFcrIQwOjcxu1E/RAIQwjQen5me6ICDebENSUfX+Q81dNnRx2xtfDgWVDmHHx4URd2H3iJTL/PLa6RnPPZEeabeqlg+jsL2EiuZkYky/7T7fx1FMer9XA4CKl8VYAPbN0FIcPw5iTpcZGS1mqKlgfNNkP/u5fORMXvbJuiqM65vF7vrkB4PyO9+8e9Ws76K/umVVmxq4EEdcUT+bkvYCOXacbnIMX5FTSH35h8wmm0s60WzPi82oz1apVmPBi8hClG2UwQ2FQuVcMUp2sKllDhjqXBlwXg9XaKBNg1wccc+JnRHk/Uckit95CAu0Yvxc982+j9h1PZMVd230KWp3GQnKXo44NwXIlC2UXhXbAoW6eS961yF5vEugohC5zcG2i0UOazYZqo9HNLDgVZ2rfWCKwYHTShYnB9yzSjql4msXvLaXpWaeNowHhAiEYmeT7Q0Ok7OJXmgIjFivaMWq9oIV0nvdNaSl43PyQw0rzbMkogVax+Yv4SwGjyEGNKWTCBHanWQQPV7OT4A7AnCbInM54/ralnvPo9xggf0cj6Zr5JUFIpgqaJp3Hen64SuMq8IaDYNiRRtq1aqou5U9ABuDxDLnda9Gt3CP+pt+m4QaJJwPcY0z/f0eONf0fHwm69AP07zXf7/E1omSRII/feZVntqgUhJzKMmeSan80zNKArO18/iwPhZI9xLBA/UCDMQTZAmkTmwC8HufV+xvB7n6sJE+QtuUyo3lupOKbqheVnGOJp2iF4W06VXtZnpuW0QqDS/EIVnHDdjeR4eORNQdEFf+Ia+TKbvDsZdxOSi02REKGC62ef37GkZvQb4X8iEm3ri39lPw1SuSjNhiK+KTiQ+zL/OHtLNEO2s117qY0hkzxT3miKTGBQ1uuJqSQR/CqAykJRCLhfye26aXaCCkPXfZy9Yog7RM92LlGx/+bJuviby7YWzdjAjmwFBltc8BGVNwKnK5p5xctWVLweFIqSzbJ+XnZqwgvtT8VUOx9D0nob8Mc0q/ZWefSNkb2vHWmP8GJqNRHPx4J0yQc0wW9zREOFffU9sJQ1nSNupJrdbxDi8bPSR1mRkJ4K76OHllpoadMlybAWOfTewtWhuI93DHCSUrRCyUXnQoByIDXC8vHB0LyBhl3dlSjtqdV2H1tcMufUNNEWxlpiRlx1YDdpZpIpILDa1OgU1TNFOWvdL8p1ZRgcX9ZeJZuIn/ehwkLfmvbqVIbmmkHI6V/kUCFpi0N/oeIO9KYgPnDek1kvKu2VWH0A/Hq8fFK/BRZPbsLBjlVqhW3HvwajfZTkiX//Gkaazv7kGKFepOsimmbhJYdJr0To1psIT+u7gE/WVBcCzohug41cgcGaRhLkISxAsc3SpQwtsl9+LExpPSpDkaCvUu0Xzg/yTie/Lakc2Z9kJFh4iyG6LuAMmJUwzEGQi+V4iKu1qnt+Z6wiRxL008l5hTYehRIGoAGlhSW9Jcq1sZHMXjLjj1+iLTxxXO/Qa4po7IatNF+GFQgZ7MXP8wnjjl1PiHFRZaZr9e6GWgiDfpwGyTOqCfaivjMgmXorM4eF8F28J46Qm1M2A7ez9gQfUl9EKdOBYsx+509WDqO9bh5B6TZ8YXaIciCVyoEs7OC0JLyncGju6OSmJoYBKIeS5/m/UfaD+rBNkPgNfk+wpQExUGMfnFQguyJ444P3iuoHDSlHdwIpTKalknaTr7pvqm7/k5gdpdCejrxC4o+2n2DJslrxxUAKW/UZhRIDjLQv5c0S9x6Bgp2dahDeC4oJpXmTP63A03bdnH8nDDrdzdODg108nZ/hoh9SrxKgIrz7+wPvY7RHYRTu6Dh8HH4FeL+d9gl4zLuQEjTUKRI/An9y8Pw2VoMI8OHgmwOOFASI9gViWCrhhzsaU6uP73O6AtATskyofX3Tb8F8UY/wKslsEagILYqmxIIQxFHkWp9ZyqSuhH1NWq+Rawdis1tIMI7u+VfqUKdrcFk9RMYU6wwF6hNSTIkMYCN3LPGsc5qmQ/86w3N2Q4XQ5Qtweg0zJXElui2KVdCPsZauIYhS4WXC9O7fsUXUpMBsJ+OBDFyX7yUc+WCiPBc1zyk7WrSfUfNcGOkO90zYKCZCs57jWgwTy43VY16Dc7ZRK57gZE6JqwLBBv5oS/74T2pV8fOVqLk4QPqOrL2wgj2s2kO/lK88UwBfYJs5OETdffQtYjEiFvdD1vnjF7ORW44mYDZGvymdIRlRNEyBfXdAvavPiHs+0wwVZQ71O0vitd+5KjMhq7VECpbX72T+7WyzbdDq7BHYLnTX9H60Vn9PM5MKgRGxobStxHNoBvrzrxIa/2BVwJhUP5Q5QdhEdMDsrMiSrfxepvBUOSeG1IDNqisaHnC2/RPfyy5T14RKTUsWZqabQWahHzsObFADA4B8xJHpm2+y2HYA4AG1RfXGwFbtgZV2XteFVCRWBurdvjZ+Ks8GG21jPvgK1AX1hApzbi1pJmdE+kAB1VN+Z45i/5FCybWiCXYMWZ572EhZ9ceSn845E8BOgkTNmZPCgQP8c4FCadILwEXnDFvxPz3rcEmeAAEp/qtNt6mvRaImkyHozw+Z26Gl9w0CczXEuxWPFQupYX+NW9lKvcMpHoPHo+yj2FSNxOgKADqOcmfWMblnpg2nmzer0+fmNtb+gXC/sLfpbumbRA4tbopzmUa8Tp/2Hv+O/uUh8yBoDbb4q8HgQXUor0YGUGR1MkrcblkBB9FAk8wA1u+WKJ+thM3KXaXL7PgfDWjugwTfJzjCfGrAVtrgphuqhkOFq5YGO1d9+L2FDdX63Th8NsSmUzfLsre22CTy/8blatf0b+dgjE+buY/m67xSLFZnJtjyO42bZvBIw+aaq7Qd2CEQUUkVfP/ibd0AJZMRDq/jwvShPwQc8+f5ATpXQX6ntGt6v/OAyVY6HgnjLxClNgT6TbFKSd+OSa3Cgigei0XKRKodRYsdCZWNtmn1qr+2TEe+0kP8lTu0Ikb0NYIllw0deWagUvxpFIifTglgKQtnlOAWIPVTuuHnWHbtXVQlTTULUBvqXEGHpAz/Wnz3rNHG01Y5N8buf8SCL6U/+LCwe/VW8apBtbFJf0zG8BisEl2v3GnjKwaRahalMfGgbb2rjsi4FURz1pu3zaFStiJ4LZxJa+s2H6d/uUG2W3xIxuxublxUpozNvL3JzvSJf41hYzY++fc7iRYYmL4a0NDbp2L4h9Nvo63lJ1Mad2vq/DouAr6e8MkQbpZpu7DsPfHSGDPQFoQ1T0RHUB6DqEXMxyB348jHZoCdSgOvrHDAd0gxA97nM82MdhTrl5r4dlwOB8LvoepIpinczu0OmyOp4BBXHQYSHQ32b6/ke/hsZZtekbVFLx0HSOcvGNt5PxPXjzUhInKHx2aePdLMDkpgKBgh9krfbAKxor8Jqum4iZwIhT+MD2jc/FAnBJleCyAeeiH2FOzkqA0GoJAY/htHnTpWsARN1B6Bke7dC7gPlaGViQP08SPBgBFFDq6/YBzMlk87CqatNH/uHhmhUkbpk+9LCVFMCsIUrgFDdMNKCYjtgN9yS6DpFpkHABjuvqT3MSO2cKce93FRNAD/2w8/C/c4DtJglRmcVWhlXIEuMVuI0pa9qXEa62cnaITDvQgTUd/fvg8ChnA9XCZi1kb1H7U/EteYiejjnNOuS58w1H7KZtD3CJXgkrp8aVrpfM4Iaht9W9Jd0oKmjqsRRpuFD1Kzz8b9WOa6xp8qtDo9hOzgm/Hp6WUmWdstNtbxV0mB+MngsgEH6kwzXKT7vnF53vq8JoKkow6SBSLq1xBYn8atsl7E84jg+1Qdw9069y0q6z9s8lTm1eQV+hUIytKVkoLgDYsYeFQUMqG2LM38VIFyYiL1xe3Fvto/vCLHCGQLaVHWhWvIZJGmvzTqoslv5cqUMePKtwGHUXdMWwujOtrrb64yoEpwOc0LvK2c5kYl4WG8u1TU+0HVD7TWNeKb3KkGV9yfuyyrQyv+lGCPPbE3iiZvc2qFR1rOHcgLTJRNu8Bu7TEhLAqLmS/tlGChq36K5NYn+ERtOrEV5p5eRXaznGJJyrcWwRZlmk9pyvIxPb1FT9ZCNxaMhMKon8+ESa/8THD63cttGaWDBgJ/1+nzmQh5sAQRLOBic78+LlsGucGema2JJaO+1xfrRJJMqP7Ebbr8T2tgbPMHMAJYWyLdq4uwNebu6Lj25iVfTiSPy86x9uCzkAbRgVQ//Lvo21H8TChB+c+OHKddIAM83d6r07LeX1M7spwERB4Go97GGbb8l7/LsjrxQw5ts/gFkVQnMVep/pCdjKYVAHWbuEKAlvNd337vqXHm2CqaGPwOC4MhdHCxgTajULWz3wEzUnQ+Ad8lh4u2pZ0/7uI4l3i5nM//jBZgIcP+12SQxUhEJrl/fbaRoqxktEO4Pt9Inl4pBOhtRC44Y0/S01jfTvUM/NberB1yzYffRj/C6hXVFBy+apdojXVkGZIGPpG0mV8oaulcqLOZEDJn2DaaCjIVlDRkC25VqXV/KT2fXcBc1Fpjn94j6AHrT7eNypCiFerARoax1vOxsMHIXwk7EHVwA/fFRzajnxxBxLfG4WLj7Kr+LwDYxhpkepbmXxTBwIGbrPJ7WGqkQA2+C0vFtH/iX+JwP2QFeAXrZtHfV0Okmkl5+NTFcWuGygYlRh1YJ5LPWzQILIFZkPK+BmpbbOvl7l+havE0MwavIRb+hqU1Gfu05yvr2Egptsrrog523bvhXWKNDP6hpxcjW8yV9ZPr+Ij6wLeVtwhm9lUhdID85cgm52QxYrpuIuOCNJgd5WAJZanWaCUz2VPKF21WU2Z+rLrAb+5ZS+IPLeRK8ppMBu8um/ahgKzLV+ZkDCEHXrlL1ak3iX1dM0zRoN4SNQIYLowpj9+o2sOBxlgq+JIDifSR4j8zZjse44r8+bKTU1/pIUw/8S4KKTmUn2d38PK9xgNAsNvKT8WTA2SS+QyH1i96i1zUnEATNeN4jL6t67e+KwzEYOekiQogiUMZFeDv+FVDTETbXcI9T1XG20SADJNXs+gkKrmB8Bs7T5E31umDL/kWfAJFBL6my9oXEhrBbjdXHhqjsugWzO0tPP2s0M0v1V5NF/6iHBMOjwK0h8wN1NMblEP5i0sd4ecOW2e4wDLTknQIQstmTCM0ylgMR3WAOdZtnqP/OkBup8UYeIIApK4z+rPFDl4LJNjiGD907mC0MBEzPLxYNDrPL32EZPhJVLxq7xWa7WUDlcQtOCH0zx3Fvx5aCPGaLXqhVLTZHfcuMoI19ystdHmnBIgMvosrqsYvBl6cR6yIltZE3wrk6dSL4Zng+mlivoGFsby4FPWnrT8Zr/BiZ8r1cfsNSXxiNb3HgBK5X+yxWiQ2wkXXI0iY1txMPk9NXY5Py3rFsHF32YCSvtmbr+bzsuE2gGccap3OhZ5y40j1/hyYOOshg+Ua+3sSAyoJTdoy+S1n9ijPaQAJl6ziXqd5lPJXhl+K7qDYVB/WUbIm+x4GlgYjIKSXfmiJ9Rplcvn/3mQLhrXLZ002gh7iB1CYuN3wCXfH57Tkzd95QU6f6mGuDEcQcRYimyFCciSiFTHWvOUAWvOv1P+Q06FHm+HxsT5UDHth27LCR3lddFL1tqEhvsRpDw9rXtfXb7vZa4fx3Kj5wds6FnkwtQZyeuuPYsaQEI2z1F+UQqGyhwGt3r9PNE7qO3U64M3etyCBJfq+N3zNes1AkoReereTZWB2uIq+BfsXoFDG8kfLHKRyOohcWo2NhFMwRnQy8Ez39RN6ZnW1/y1cSmyCKDBzWX/Zp237fBJoVgJ7aHsoUqPk1RD3IRkyxUg9zngaziBNG9wrB1p+CXd1VnCyxzCzxpdia90DQ7XyvrQ8zOzE0hrLnYsNXmtmWyg4nz8alJxvCuRiMjc1wwy3cL/p1mJgEyQk+XdS799EDdAJ+I5eMebIpWASUKuVM22pgQ4VAVKIB0xEWeLpS6OxHz7eCVX4da7N8xc35otbqbiNKgqAwXY4VfNV6ZuMYBxheXjoJlP7pV5Ng7yufmveZVnoXVETfXjCQzoG1KeRM390pfCRF3XKxTtAZPRhGovwSPJ7+ExVucngzitjqIUqXwVTDebw0eF9DI2U0oIuPnp0OdolvS7Px+yHdE2NzAhpJnNrqjPQ3Ck3qy5hlwZEs90K4/CwcVqY2sAXTvR/UYktPPs6jtO0c75mtUN8neJN8o4K7G3jnvbm0YlboC7JxjBExlnpbBUZlKdFACuS7CYDt0kdLHDjsmBwR+vwnJo2fRHKrqqYQeO4qKyYFmEV52pEs8Jqd7Xl90qaNVKgLNJYj2Ala6g6FpFGBCj9Br7aHViiRr0yuq4n619Z9IM3QMeFf+v7MmxI2NTJP5NJsj02hkYCTrPPMZniiKBZxDjo0RlHa4I1uAswrlDPSIiTtaRcL66tT1aXcmPdNcR782P82KIKqL1ZlacKip3UdIiZH/arhRpDHj7B8+EN4U4k3VVdQGksxk6ihLtfZPeSQ5+H6PGCmtgTMIYIDoAPKbAbDe85BR7/0vbklLO0sQRtPPBNv4jTKGkbIoHrSMLpPAn8UEhn55OTYjZoHE+xfP1MOaousO0q+9MA0yN8COj6YQuPu/KwmhwHGUAE/em6OAu7E8Dqmsr/lfbVHIps9lMxz6PjZffBb4cTmmMuzHsPDQQwZWHVNtQSYQI58o/EofbAdNRhHjU+JqWHdH4kEvvoAIKCNZfRXeU4SwSz+oCTEKF7LYWyT1o+5mmqW6OLRIo3f1+BFZvEgQfKSkGDz8ErWviiXjpgfGnA9wdM39b8Fj6OqeDy61MFzB8DZHJTynZJLnzdKMb3mqO1P72rSJ7XrWxdhMFJwjpp7SpJ1siI5SMxgDRNOc54ezcWbVB3n9Sa0uHCx4PCM5sPoCrKQ13H/+igwLS1w4c6XK0nk6eMmAe2HLpRoHfLCqUvmTQCoRKdzayonlyKZ3SpSJt3rQvz0NZhtoB6xalwE31eBc4wVZekyV3cW7z0Dj4nhUoUnZ4j/O18IQDeu6t3cgX0KtTSPkBIhreyG9bmy3XQeqq9/Vv+HJzWzjykORlnygoLVGEoAVNx9BvF6AJv8AboGiCC9/yqHtKVYAtPH5u8MaKfdfZZ0fvVKaEsC/2jwP1YmkgrESu327yFHsMBib9Ht8meS8LrGmiVNsnZlY6RLmFvjtM78yO/idvQFw/uR3AfP2j6saOeB+gJwSca1Pk1dMJVSx6TiWxPXhSlQ+mR8y+q872vKnv5aRCr/IvXrbFoGRB/APTSXNETcy9cFYD5yS6dpLfhpGQrclFO9nGI/WX1Fw3LOhzmgkE3bwjJghmeHFbjOQTnJ6ySrCUk9QyKl//uK8DcrfqdYbd3zU2AaPjsJD+YTOc8zZF0YUbKO4RnKDAt/uvnNdV7Wwspor0P40Lmxwdl+2pPDyPcBsgMbkmLOBFK1bntLsVn6ycgphACKIBHnxvD6W9Pnh60/rhNLxBdy3C8aysLbQv20XvuRxMjmzqhHK75kEnAzQjgaWd+g4JrUWcvRhx2ACI1tBpcbZGVCWJRRsBu81iP8PUw5evICd2Dm11wHR69we4/S+eYbddu/aXD2mrbuCqmPlKu5WQ5DEh5yXcDkUTkwOBuf/b5n/wvhCDBp5i9EliCnsR79fqCLBeTierPPXQycmLlaHt6emDpERua9wxQ6k3cB3R/SnF5gttMTFzBZXPCfqfQGEzKYZ3uaOoCKQL2nXNel0fGzTI11odLqI4OQoofZsmQjFgGq7eieQ2pjfq7+Mkz1VXACha2Q2zpgUjnnX7esibHQKRoql2i6wLcnGny2rnvCO6OvgiDsAQ6dtcran1mfNuX7W7oF/ctM5sTOuer8KKjuNaSWEa9pa9Rx+NKYgyXpeFfm1As1MNm19QT+27nB5WEcvRuab/LeIGWSeAvAyWlgCGnUd0Y8uXHfe/70p2YmF/J7OQgCCQzq/DrnTLjxIGKYnJCboRdfpRfOFo8fNdJHQa+VOcVBREBxO9dzQR16tIX7eM5Jv+1fotTdEIA2T/RzPNmhIekMX+HQPikr50Rtmu15bm42kpLWWZ3JcrKBfLiArxvW+VyrG8rb6Rrpii18QocbSdF0I0cXpMJcumOjfjOwEDmctly9GJKFUjBaJqpTM2VkJdbn7shN1DCpA3NfwN6SW5lkuzi+Mz4Cp+CNV+XgyKgGoSupRIhz55Bk9DPZehpiz3jB8daXlvxLo+I0K5TfA09AAk+popXQV15cKYB4exzKULnFmtWU1Ij8d4blT9mmfE2n7kALTqBMyzpvmUtQEynrXJNMNCO/LNYJB2thrwFlZdV3v+3ADSu+SLD2VHXNuJMfE/nyThg14FPPrnfFznSVCBIbWkpz5VJmeWXQ3ahQlCNsLCWm74tYjCOnb1QlLSW/Bxa4ijeDlkZCv/rcKIXPLkToE/KMFZHOy87BSozA8tAdNVVNymh1dxJUSwa7ytcIHGUqmARKTLh6HZ4P7CdxcIODs/f777mzo/sQeRedWgfcV8i+7ZagJR/OgJ98f8vgO99C3meXD5PVBy/hFGVRRxnasc/qLkhbvijkn5mQkP0WrVuwoPmb5XlGI3tpt+35GcmbwfYkhpYJC1Etlr+Gj7bc9os9NcsBNND7dmTvYL43ml8REpnHTNgvfnLZ4PNIbhI7rFaFm4D9S+1C3GnCBRSIFGQEv3aKIqCnKwCXadGeksN2n5gW8RKZwnOnKD/bp00IkxWIsxueH43dakw/ZmY8Oyoq85Vg/vqakz9I9U4WbSsDf6E+twQHYjysyhIuV26eag2PfCKRk247+151j9GmLzx7fXolyF/j0qmaxCX1Syh4hlXw4kn+JjEX/rEthp+HQTG9IT2oFVTvIb/mGFKIDNoRBPgj7NdU6YI+3W42GHY3d2bOjm7iC7aPKuw+lOhQMFCacRhjOgCWnmyQD3u/xvUUz8JLOjK41bgEuJyEcaXHQvC1pttyS8Win6WRTUUfSWkETWfFOuhkwF+ghSMtS8xgkBampt+D8w+lnNN/H4CkOQ222cVrNZ7zkN4LHrIf0kr1f3d68rg3c/KCUU5IGXoWLSkn4B2Hj6EBATStjX9i9uc6FPc9UHkt4sCdJEBueWc0LCmE8BkkjGNjeDBWeTzogkjvEtmbsBb22rOC4y4p1fyg4P9Ys1FeRNfPvEP3X4eqvIlI/7xXuym12KiNaal+0Qgg+czEOX7FjK3LPYo6ElDCsF5SK86SS8DxWgAlcSOZ42gghTLz8FMDAqyVwGni5NcxbgjR++pQm7pRmYtGAOqBL50L4gznkc9w/9qTbeJZFf+llNe4/NATgEdr4a+EWeXB9c1PfYRLRe78+PfJD/3k7xNjRXpI16k3ybiuBeLFeIlAzCNVinN3v6VwSgUAzRG4ZchxXMuOvBv3H+5XLjNS1KYuUrnt5ITcHNPHT2ITSHC5/SmhksGZIfco26nq/9KKMNQ1Hq08fHNkdWt1VyUcOlZOs6jDk7wJWrtuWitwXjzR5mDOQ9l+IxRk/xgMoNPKlD/W5tjTDhhWSeZRNywOgU/fjWd3zVvu6hnZPBfEISeq/m9P0N3abiddYHiP8Tdi6YIod+cv9swMGEOrqV9cfwH2KQz1EezwFiXg9OjI8mQ4gzfBT/Eyul9y0TYLT+owISwJhlv2x9/GsBpGlBloFJVU8ypnq8GGx1YmlhafHnZID3HpIFfHbcmBIuVKwfbtREHXHrhtDX4JJY+9DUPPQFx5AhhZF3yDdcySJvqgVsBuuCj7a3F1IiWraQXD6xMjhb3JxfSSn/DzmlyhpBrcWCI5MoYigAS68/eBFCIQBO02PQ65o0SsVD8vxED+8gXivxyD2zxJnNMqbfTZ5mgT0j715SQu7Ht/liq2XUASgpRWYPz01kR7+isDulb3TbrbI9OGsOZN42QA08T3QjwlwRmBPTcxU67LhxsQJGeDhuAP9OuYd9QQA6rSTAXyOaJQ/AJGKkv7UW2Ij2ikqslgqJ8YaYlIEmC3SObreTuzWZcIDvbBUy1BI7uOPYLNrowT2G+EA2qKR2dROseDvng4FQU1cXLVRPJJGR8TafkY0esTvOsPu8V8NK4AFTe2vKQqHKnQ0xWKr7p71g8QJ4I90bZ1zHP1Fki4fpuws8nXelWerhvOJcjo/NKHGOgnh5UQczWNpG1RwpJmN2Upi214VMzP1ZJ5UOTHYD40LPquhOqlwqmhmvkrREcaFB5+cilKGhqEJECQTnX/lmPH+OBgBthR71yluT40Iyf6FDCZ3WspmU5XNt2lwOgu6ITzyg8u69NupT0prhNwFvqqpJ15KiWI5SiLCZYAgPmWJpURvOLPdCxDV9LO9MPwc5UganHXgVMsciZOVbaIiJDiZ/vSX0uf0UGQ94v/b9Y+Ov2hSbMV9R4w7RQZtYuteQLe8vghT8oksseddLXc/EFKs+ubik5+Buqir0JpF0VpPizvZUSCNw9y7MGNU/+6QQ3A46VhCTMA3Y+W32yb+V6ywPucLh13uot170KOclc/a4YF1xA6+LxCfgBQDE7bIJYT+ZAIDU8t1cxieHofpTCVW6FAD/D6Or8qQMovqi9keM7mYM1ImnIzG4O6b76luEYGQZQn4HUd4CY+cwfNsNs/LddTk8Q787u0uFZ/wdCci28iqJqeVQLQ5hyUgJXuji8JzLwqluF+A0e5UZskj6KOIqWqIKlGtXpDln0pracf6h5TVRjP8TbiA3mVD987XqEIUttXZXQcA3nvlTO+cMKZ5/Mpg0Hvgr2a7sZKKFMRbgYoOhgez8yw1wd21rFnwS45u95kcZPNkib4TNhCEJvuJtSkMT/T8LchU7o97dpe0t8b8WwGa7aIHNaIUCDtSqSp0ebKy28yUkHM7TcWgc0ZstpLN0LkbINnklLS49hTkzeeM5+ebgntnPiNgeT9qYeYizpKj+KV5XwED2Rg5nK0eikogRU0pI8Bfg1dPCfcjO01lNjrwtXN7IwztBsSEZJZG/C8aDa7Xfhp1+UQO7fKGftkDNLfQWlgq35ALQAqQjWzxYvwQw64PxwpRjsiD+EzN3bwIVX+FxBLmKKR7HxW11jUBk5pVQ6SbNrx4ZvNn6uSWb1h96C1rwk8U+ozMbTS5B+AD/VuGesE9Dz3G1gFlMwEsVRBUORoy+NprB6ah2XiWGRI2IwrGuycWc0AiwHOav7w1v2VaZtDZ2wvyMMZv5tEu3xQ6TLvFusPDZdFKp7drrug1Zj3CI/xfqqGZ1oP2HcG9XVkxKnxW5ElvM6czB0nWQlfDPEOdlZJ3dI4bDRZYUFkk8LYILDkZQYUamIeiwsQmobVfGQD09/kvTQ/ychTOmCC8Qlmcxx/tXNtS8IK68GbQ1528h07QZ/Ly7LV3enoUKgzoEM7VP2otp3FLqNAfl+Du13so19CybLmfR9U6pxPBeRcO4Ty0dV0NhsZyhE4eTyoR7BkwWn/j9skBKOw1BomamVnBXYpUsVLdnDAIncJ/qIySaNlm+/IomsUrppom0UEWfj4zzC0RUTMBAYnY4avFKsYI76kLSVWkugUgqF7WIUWGC8fIWiuXf0K8vbRkkGzEO6VmyQUYK1FmVkYgzXK0f/AWIJGbBlatNyiR8wAq3arsujlrJNvztbwo2W2dag6XD8ypMBF8hYtP4O9f5u2CieWe7wpJfUFDwq8CVpR+jTDEe4X7E415DlPWYO0MBXxa/+lIpr8bdWuJpI5d4Z++rpQLXAeZrG3uGQNspg9G8Cf2VnMl1I/yHJn0ep3Bg6W1fMInzeR/mHSIBWttb29I4Kx5KW8NorVhV0kppnYkJb+NpYeIGFpyW7ektPv+I4LluHjDx+7Is/PK5d4ZMCbbQn7Q2q8B6puqSVPQfjr3RAmp1NbhXzhPSd1YffooGbyiqFQbuLOyFUqtJyZ4AI9yWoV1tqJ37uYSZ0VYJ25uzkLtIqkdoENLk7hFCWcvcHq1GaO3OpAwncwmiPKfezQRyeTJ7BTmWugp+boAVG+LeJ/iYniAnNg5jCg+H9GBq3iiFKqle0PesbIQbnTx03SqBCk93Pz6WfWdXponGTcR4BjwOf1JMLxVLovm6BgHuLmLaogMdCHJTVne2N2VVyiyZGcrQf0kzl3w5J+ZbDlb14VkOB9x94C1aKN7XpfhFgD8XBqOH25nid3ny9+1+id9tZca/AJRh2CVbOdOmofS94y9E2cdUN6F+4w4jmMSFx8Vk9cUgv+ngncOkuQ3W9J+vCTjghOr3dBM/Y23bRsidktkU5wWNXGyDyW56byoLFBvOQuEvYZgs5b3cRJnSTkrLRWzyTW24Hun6pSYpaKwrPoR6Uqn2BdOUpXwjibHa47I8W4T5wQN4Gj/SSha4DWOQWl+FrrB16y1EETaNpkNlhxM+fG0gw7Ai0iizlrv+Ub9ZOlzKoLT+kGIZU2VjiVxJfql2EzfqG84udzHdAvOcPvlI1O0HU3pH+uT9wf3sVjqlwn733Lv0cKXvMMa2r3TuuqHEnTHzs5yzKB1GHrYg8I1FE/Gq5sDR3TLD6tu8waej1ByecR1xVLTB1ZmFI+p3860MtZA0x7SR+SgU2jXXb/ZLFo3/4L0qOL5ujFozTPx/+u8A+GHI+P44qFhbA1tXh5iaTMvzl/VXSdNMXozvY4U64rBRKaeXCHq/Il2o5U2KSSOzDgbG2IGNC/C/XmTmjH/umL1ZecXE18ifhqUnQfpoJxKlGGLSm8Sr+9foHqnS/dUGKF9kDhkhMhaNQ1pr9AyLAyrcYQjT6lwl45TOIw9BGxEl8L2r5KSwBvXCNioBQEZ3Ke61A1RxTPYXho1ub55sPanopDB5CUAKWt++WlCua4zj7bzs5ZN41mh69EHNrVt1MW/q+fQMiw9JiZr45s+O25seQ6/HJY0FuRQbPFq3wy2eZ6uTHVrn29+L53rL6HMOR347+E5uesD2tb+bHrknSIe1pHGRDpaSrifQJcpeJThHAqcZRusczcHfFJ5P8YTKD+la/a1Bja9nXyOEZ0USSmMJXaYhn26yQPXFjWnO23FmYiMhgOxc96pf+rZppUmWb2xZ0gvAP1cvwqOcEo7Kv57kiq1F1Bj57iVf7GaCLJGke8hLzwKg3ek/6IGGcToJwxqibpGun331qqDQ798F6SOBD5St7ZPjohWxsoQ5LkRivqtGOrcaZx5hzsYw+HjSEbBi+ovEDFUhZtD8tsR4WhhvEwOhGMo9nB9G+A7HjaPLQdIhrv5bq3y67yMYvXcNgGZdGEJ3cCwAUPLgdf9SeVnUPpd57Gk90ARf6vODQNfMmJz9ZQi6/Hxv7E1sbEy5hTaNGOEbT6wAIkYODKjDKxuxtu5KP0te56+OybdyNeXT+9btDLy8x0gPi6IVbJWRSrqBULL16hyXj5++a6jUr0q/GknZ7LPuPfE2VfpOch80F0zFpUa55eCCPpY5pULxHW9NLh2H2Kg9C6XpSGxGfTyGkLTQmWU053T2U3tbhfaB4QiUeizTnv5QwqAbGR7CsX0n2/Wutk4fGKERrwkc4+1mBstpU9c4DH4Y6HIba6OLfxT9C3RfCIACapZi0znqEdd+UgMhSbwA1fPVQoARJfDGxPLteAWh+JEX6oL37Ye9xs0EuBZrMeYJGpx0XXSTX8LeRoo+Ihame4RhcyQ8ssw+aIgecMyEKHBkCF7uUGdlHu/8sBroxHBPBsXPrDcmHD1kGD7nuJ2hj+Y1AZiH4ZWLcM6S5UHFCYa4SYvk6z1MSGH40gO72GFDeO4ZtTgGF6uxHlQQxsiYPkhWwEaZpNPI20a0lXXTz8BqJ+98k14UzeSEsNmDzVpqSn0zz7XMWNlTu6UXS74u/F3e9inyCpq7cNQol9Hew9pHMTMc24BXxJwOkmZsTkabHu4oU4EA3PYvA/kAERP2AU5Ezox5yIIhF5YPhWMbULy5XmVsg/A4IJeZZCstNRwWgmQj9K3PpIPa8d8rhQiZCKpm9DnaXCit0Q0tXOpXrgkrN8CQcGAS1650aJzArzt7Ozp9RwWBtvL9EqgK5kPhRmm4PmWk8TVS6dKlFoyIsSj+u2f7p+BHkTYmQuA8G3UdvHier81WyEEfNhM8MgFtnCMYijsu8AP8Zk/swuOSmvLp8sbLu3yQWpHSFLWoB8Hg7B1porfdU5XTpaSCijAvStxEeWkuaxP8f3yPGvr6SJ05arsynOATefPB+rjYPBhasY12mdYbJLH71y+U4rjpebpxZZg6AG8ZyhR5flfnGfYOxf/qIwIL/ttYd3CSniHK37s9E48+ga+j8tF1ihwn/ZVEinqJa6pdUduMmQ13n/svIbTa6BsS911Jf7LM/S5aWnbmhJztj7hJyOjp56hiTwpTWIP7ILTIm6y0vLa0KL04btwhtk/tMKxysoojUl0WOgxEvUZS80/sIAhMFbkCY4MyMwrx5WlqEE+8OQamnfxwlGjWUg3pzYHW97AqSOtnW9gny/Zv9yTrGuQc44K43KcsR2YYKEkolN3HRYwyIYA5k4WFU1rw3C4SRGSRykLgTKmvAWrrAX8VimczmC+xnqR+KiXaZxph4QE5Fu2WiMFbKhj85P/WoSqW3yqrri1haKLZSm7QgRkPCID6wdXApbOHZyZq6SuXlxXrwhY7QngWXsOPLHevd7HDGwq99zD/001qXvEVe9gfLjQZHRgfmCFqobxF6n/SFx1bTAavM9fOu5a6pM+0rMmjRSmAasv5jQz4M4ipkzDeJy6xeZHSGrpoRN35hKG1z7b328JUwx2U/YgVr77WIXYIIvwwjTcoHqDl0S8Ge78mXtAbAA28wPD4pThJRetRW5d1MyglJ+ui8C2/ZxVvoDxlo9mWeMayTVHJPZ32w1/oV0sHhP1CLpTi91ZSo62Rw4z2hqEmwMT/x8Pd/UAJtaWDNnfErYUmydJ1w0eAiB5TURGR0JiL03B4oudlTU5e7Z4XPkt0GDZRyBNvJ+ezYcF7sJk6ch7erAcOMCfnUus3cjF6L3vP/iTYXEW9UiFOgTpBr98c0qedJdE9CiSxbVnO692LEPJ8mSK8LWpdwyR6nujjJflcfTHuTi4GDUzGlXS5FJSSDrAkRpnjbOe9eAIKR8AlNZEBlB6woPy5TgEnO/4ha/zBpfi+nEYVbTfVfTGE1bnQMOqwA67DyToBZBunFh73ez7F1kBqmch79g1DRVolqIz5TD7fx6oJ1ZpI6CwICPg4qejEhrKSIRGgn7PpAq3/odQsW6llR8JuuiMdLXxspYAZZfCu6cbJ/GdODUL9eQzZVo6Zcmqt6TbXUOHNx1dSmtY7RnDrMkrVl6SxtmdUxu6BMuWoqV2ID0QWvxxZG3AfpRkYTOBfe9HV4j0fYT9FwLMkRVrUZb1OpHQ0pIW6RDWGBQkcsGwZnpDld9LGl+1m9jLIn9bW6ZjIPyW7ivU7YCbszvMcO89ReS/4qFFCdhsSLhsHd+9ewe7nHlKsZ3xCMkfQcLO1O6w1ryiYZZfgAlX2T5zbYjqqY4fNq2fmp+6M8LoS85jowNcc7HBgXXRlT279Hb4y1ehOjmtwUbRn90kRPWu29oEDwJIdZVeA9tHIDq5Gxa3GRFS54mkoe+gKp6NiTos2NMvLhiZwxIdv3CDI3Uag017crvL/3yIEIIrr4t56zrdYhX2Q48ycyAM7rST0qjRlIlzzKDA31lBiNDmGi/GtDadOhQIFLePXu8FPYwHR5/Gk2/O6+7lsroXFNV49ifScpkbadbkb7HkiWYX7jqGvQ3NmOu0HQnYqUoa2J5ogzJVzUS1rfDoXrJWPQhEnqdVfM5tfcFEkjrqyZZujar5h30MV2PVFk9MnStUMwZtwLHbu392H59dJHCZ3tFIa9qFtromGHbO01D0h3Db9k2Cm1N1DJ+78tFrdpjEB8Az/O6REUBUfXUnr+aDWV/kRmk/RF3vtQjr8jdzRo+g0xwhyqXFhLEfRqi8uAnNJzOFB8+5syAwvLvHN5AC1h0lz8dHOPP626nJYykcM8ZEZ4UiydGHMyGAHFC8qSQs5HN/kmp7sWKntsxCg4oJtg+MflxgND08h/SzsCaN2SK5QXg6zmoZQzIhW+0aHL31G5ndqblJ9ofSdES9Xgwj4jVjhpP9Mv/6+Z8mijKy+jVQahCIKwJKmA2Gvz9fe75bTlKETb+xCfD7/I8pyunpcS2ZVyhMym9kseoBxD0pyheYxUd50L3T/e1+pZ1YtUft0vMHOM6LxU0OkyHHtGdElaZFSu8yanu1lYiYJRqyme7pN1fL2+Rw6xp2yBGnY2UNOYpkzi6/IkJOEk3qroY091OTYqjyVdkrw6uKKXCWfddr632tFTMAABcTB6/5Go4YzxyLGPsvMRptacLLctkEq/NBsw6ZFkqB6WHoTGnz2vp9frcCOFIRA2HRG71z/u/u5g4x85YoPwwPm+WLHTTPxamVf3kc7tFOnBdF09ic/UmQc37ISxbfc8gD/9wLrZX0uQzaGLALCNixhooBt7On5SdEYbtaR3IFPjB/hrlhL5TZJwAjA0l7+ePbwmEjCxACm3faZzG6C4br/xD9xPCwHI6EkhoNjNLF/1Ep/mzP8i3beu18Hmr/G8CfFH+ZQegR86qNbJf+dTD6QyxskhaOv5Rw726mdtzS1jUoz2iisn4HPWbCTM4+bbg4cPBXhIsuWwvMqUb58783pfqak6sINdh7y+dyxPd4IrQRtoWyE7ATsU51TY9ZUSlH+LM5aTZDfZ4EcYgLrNfnc9K0bze16KeeFrfKP9jd1hJipcHeuugkpbdM5tiWfQxnvMim50YCla6eS1JHum1W9KApC0fP4YWWpN+VY/dUt8cw+mqbC97IaTHKM/B5dViYkK9xULMLCyzLAqK5aSoHTyrKJ3sNAJE4MQYx2K6jurZ2gl64z5n4Jt7+kQDvVKE+VCrwHP6GqiR/i6e3C45njIc/aZ8OAu5Q48VyVS0WIQbPFJrwyNxlQpZoPwXLtDfJkpv5SDKOlgUy0A9OL1Bwnt9WgOAGQXiVX4yRVFq5XKUUX70crFaRG8S4p9th1qX6b9rwekH7u035UwC2+uLtVJnzP9xsACRfgpZhzfe7kbqc/W8sBhLx9iXAxG2tfjx6gz8ymdrEKPUuWDdrMFrlEBcVUmD/0wjg+y0afOw6EEbpulSRyeoAC6QRNG3tYMSmODaou7nWb78r07AT3IFve6PpFUPveb8is6539C/bEYLpItmq4pbpp9AqK7+K/TBfyKNIUeE+sc+D3rcd3NsLVPhaM3Dnb9MRiWryC4PpUJ9y0Qyz99gkwg1W3wRDeblA2pPRRa/vn8t5xabMlqY2ZANcp3uexzh/NsCPJrSNzrDi85coMGspx1tFmGYxm8QhQiKN1K4/KDW1T6qrU6tpCw6F5DK2HBU2LzhoqC0+fot4/CV0i/we1szf+yDLf1dvXZPjNVGpDTQSdydIrhe/IUrs6nTXdkRKWjLg5Tw3z+sD6ksIHzl6qWciv6rm/zckIFp/woQO0HdG21HSaAQldE962doZV/5en1qkIpPcp3nNw+JD2RNaiJ93rnV5mwL/Ex81RJhpvzkRGOhVJLckmdZUSbrhURy+rormP0QoBKoGphgf0aPrQqMoBSryBwdEpBaRBzDtDYT1A1UZZX2tBJoXwzM/yXEoCN9aR2jZG64tQ+xabtvlu5+GAUXnXNYyTGLL8Oz2s+bLg680luy4EKfHWfbZTL3/sDcZGkJ+yscRp79KmeyKLbZPniyJxdGhLTC+sWd8BEWgY7fMsX+bgG39OWVxSFawqwcVz+SqYROwGdNvToc7Uyp9WTXi/ZRDvEt+IztUQtIeVOwWwNfglv6kDiwlupwn99Wa96D4tpuEHabQGXl6+n7O/Qy+5wDpPGVQxNWc2JWIJZqMQHXwmXBgWFV170UNR/v3fzcb48v1dW6fvPWjFzdRs9bo0P0dL8HuCP7QCGqGFa9et1as909l6tb7XLRq4HoHmgOP4znau2NMPEK4sVNtNCVmYPJ7S8vwjUdQ3pv72EDWQ6hYDbDZ4h5W4dlUgLixcW7QK7sfP/Rygy9N6ocaUnd9RToUATocgffDXGjms7kXGcvBh4uabg/tj2VzSJW1ay8VjuTX4yQ9zMCf9k3tlPHjefox9rL/zruw+g56H6BcrTzYa41ltGOcZb+6QWk7okVq0q9yeM8cOm+vLBH6MQg0M+9CjxdHPxc9ThH/gAMoqmWQYAnTq4sQvPWbI2FU4RkbfPT5wM7iWeHUIjOWl6Olgf4yP/J6BbzdPexulV7m1+ma+Go8uc1GdEKGN1cVzy4NqL7UGiDC6INp5g/uhMfzZ7k+rVS3WVyCW6iCnGRenpXbEiRdvfCb7013CO0ISuzYpYeibZ5+cOSZcbAp0GxAOPzCTRJVzBT9cN1h+DUcWdE5YZMFDC6Az4eCzRsrUSZQehSFqudWBwcbyzyq0mocTBzP714l+J+H3XHNrItd4JOqn1gB0kmCnkZLhLZLeXxrx6msaEVUVdpPgI4lqUMmD6MYnkOHDHUZS9Ra49RShVJwAmxJzqMVuzyGh8hkegkf+gcM81g0Ewi8m5ZiHn7fxc1MVrXc9vO8ex50evxNco+RlfQB++PIsbekyQu1JDSfpiRP7yvp92gDgZt9YUqPdQdbXscBcVeeZfGv37V0NX1jwFeivTGJsFLORpkE4Nn2KnC/hAs0mqQSmKe0NpY82EyCN5QWKVdLO+mPIrBDrsVtp+NlWB8tJPt4GN9B7APRFe4N+awhr/UOVwLTZW+1QvssVWDYghPvjMdHmqSprlYPS1k4ambMw3Yjfn5k9xQvZmo1sgGuCjubKYqGevFOKfNHvJn7nzHc5AHu5cmheeOiIhMT+O+2tzYTfmoBbmzgzVguVF7dIcUXn3VId/CJZO6a4QCNcHZt93yC4nu9LB4AhERb5aJNYEgn+EvfY1hp6uIMSlcOj6IYoCJ6zjuHN4EA/oA//TbbRZ+mvSvgSAvAHrwO5+9Dzqgdi7eoh7HHf1Lau4Iu1IUpxNfaSL4GBDoYkZTJwU1WXjPGgUWjdBQVNcz2ycZ2ay7oQ9K/kLL7Sb0DNDV/jwbUJnmW6XJD7bSGFOC6adJKSwEIjm+hM71dq/ZAMuQA5Ty00TJdBXblC8fTybx6J81WvbvdClu6e1HkWq/qhFUGcgInpbva37QeNXqwz+c/BECSOreMJlhZmgvFBKdaQ4wvHG0HIjjrRx0ClPoYQNiP17ya0KEB+RH3S21r0negerUB7s458/D7M6GJ04eCs4tnQqo0TAjabECBlAgC/w9uQ6/XTWwP3r0LzyTAvKM9dx3tlOwAHntIH4G9z8Cub60UBBaQ/3C+zwuvuCD/7RJh9L8SE3BI9dQL946n2xVxqStk9RO406s/YjTeR6A8DoH0HNC1rpo0XxeotJrfB4GQQ114wnEZurR/gCnfmjwm5EmMOHF4SRpdgLC6DEnsbNhgVlixpBD7q0IiAtsi2K3miZnz2J8VBv6dp57aPBqb1eAUPuWoo+YjwqxMYztwzku3vf4NeoZabuuDqdlNmh6mlCbR+b40U1sV3mIPZhG/FVy1H/1L+Aic79FLEbnxnWU6rf+Ugf9lQ+bs4FEUJl+RCsbSMhEF0fLcXLyLlvwQ1aVLJB8596Kwrg05nevipVKlTFHx3ZNuZoJ2GwBGd5SB/0ss6ZVbIgN5SRZ6bcrR+sScoPeJEQsM/CY1UgcZEt93ZdCqwjohJZj4qIZMAwItiQ3+zQJ6LfaC3cfCz26tg8FhJ0ecBC3crSmGq4FULkSGt+vj0KURX3OWmIJHfzoZacMjOqk4n8b+sqYP/Xa5xaZ+jgF+rmGQOHFZ0MBFMS3W7vFeidGPTbvKCSYBegDE2zsxLShfuwudCeWdTuPQEUyzxTeksujetVfgVx17/jLfWuU+ULDHawmEcV3entyXkRJlrqNTbQQ9sOXiaW/EMGujTbW4dRdcfVTdM07tGbjMNqWbt2B/mQSToUBlBD9nCpMvhG7fzb8ETShqFHtafZfUkosjH9A2JuQXxyLb5/O9ZLL1eMnh/ZhhQPVzfyPm60/My7LfcYTaExNMpW/81rgFx/NT3amiveAy1iAgUVbB/qF0kPN4Tw47Xpl7PypVkvAQeD3EHplrnkTtsQTsS62/Rk7l4M27vwcmeL9r5n7EQIaMfY3LBgf3nhn2jONHP0rw6y2citSNsggU7g0h/pguYW6pxMS/dI40jDQAM5K8pzmwxlteUbriAIFoTNE6t29cJjjYlkU5sekMRtsClOWZJspajoxyCQCzwkJQ5RVjSbinphO001a/P2nYozLPcWGabv3bW9Je/KeguwfhWSHeAjHeUuyKL8OWX+VWX6C6qgpOdY02ZSk0mkW5xr5NoA04Mbnw3FhVS6NUB0z40SMcQ/yrzCWNpZqXBW/xSBy2iXhvbt5mb4kGwHNePU2JDi9mL/FHyotl/Xx/XAMU2yxst+0HG//2dZrqPfRVdi8iprVBaENIu79jhN0H0QIIbe79YjOUnGaSSNM8t1/zrAsBIRP2AD1T1YotQSGsLu7bAlW+x3mDprvR5bsY8oZqIwEQ4DDhfJNpYeA5oj4yThQJjHSnRkxCGZWvUY96ryI3+M9ouDyBubNV2GB1yrJlNL83d3HnSVtN+9yq2aFhAQAlYgOXdKJxzYQrXf6TG30toTBTG3xiE7oqnvuvOJm/UgpNdcpH/xn/lDLwqm94PQH6PPr0qdzaUk/T3BtBaZ/6+m/pfZFd/jXPTvekhOvzFYMnGznIk/vmstkWrTzbdJ2SGp4OzsQuuFcHOCvHwz5Zcj+/qGkyQu3WZMtzRyQX/qXdG451XtECT9yi2LMmYhPeblEzrJcujSZAPSXgKFznsRVjFFEzbr1ju3Huuuj0gwMAYdKVtZ6NSxR6Fdl1Kg27o7iq/lxj8CzAnGOxDItvSG6l9WniDqzIIKRHBNWfSCzvd+b1bdYfahAf4neVgWcop7jXaCl00GcYYUZkB2IF7+Zi7stXhuwTEuCWiOwTx+RvVhcITy6fCYlGhNiYT3Vmfx0kIbztXEQo/HA3DOd/UkCKgtjh4PG5LknQG711B47xhcr/1K/o/jAGbNGU4CsLO+UCV1ph8PdmJQutgsKaXyWY5o5pMBY5wuzYRRyySQaH4tsCeHJNI9sq6Q/qrbA5YvjGqUtTifxbinl7xMS2YsxG9YRM6vFO7fj9PNJvgKQOu7a8JXcZv0IeuZPlYq3ILqTRdpaIZIKv+EcvOWUTT9yt2k7bplO0OnVcOStjENa8gYlCtU/GEyU580vDHg1quTtbUEAKiZ4iZEiCqK+01jCRcyztK6oijrRrYwIYHNkVONYTuTcEe6TOTILH/BVEKj+OSisX5wj1dQvFbHzt10nNdFJbH2wOcuP2D7US8IFPWkhPLGrs3fmmOW4ylT8517YEs3oALkxjD8dhNN16a1q80f4/Oj5naJcbcDT5KQutlfPocO6U0d3YUxP/w2+rCjIRCw5h+iVbelcPdrRXdrKUQyi6W0qVgMSuoE+OeDLWOepFGO/edx0Gyh8De7wJIHL8a6NDTNuDIR+wmuND7H4oXlpgVdQx99fh8N/9nnAZ+i5WuVZ9BxBM71EyEIVhBye1iK15ptjgsd3JhRXTyCXIEeWVZYJ7LFlDBfyx0PNQZA/1i9RtRoqcgh21GUckOGTdFEkwSfzBiKY0ojSUx0RRo9+16+uS3eTUL+4r23xkFHXPhuwY6c0hDzQ8qRVhvvBd89Vy2rHc79ASqWGYN0Os+YxWyN2tNFQ7XOSOcEb4F7bsPLACFc1Y8yjk5/3xtVmbnMkkqty4Rr3pOqayIzA2uK4fqMmmOZYa2hsVZbp6BM7I7rwcRDKkn0RkN30kkMXwqbd2umZjWHJYCjWbSlAYDhPTaH7AkOND458wUKKuFEMnSgLaKnRAPuJWNAqJsqiObgsOCFQ0FY33JWpEI8mNAFMs5qcItOGEGVNoEuv8WcGbqu+RV7xzDHHz8HisneCh/s7Rna6L1tA6t/4J9Ym+xfO4vMvPH2x57inZpO4XFw2/HcdZV0I7v6l3jT2oGAj4c7ypVwhaGbKHhrkiNpwErhqvQQHvcxGiF+ATx12WdSWvEMyCfVSu9WPthLCA3mvtCzJqx95yj8jB+b1LEi4MxTVjahDM5SD34aYwdxKiCNaI9MERIkLmmNHsne3XV0jFzCAr7BBFjhnGBCiiZDFM6giuQQFdL3G7c4PLKgSbuhIyFYZrWLcmTngmNzev5pPaMIOPgW0ENTt2NwrAuXaoqluQqGJDFuTPZqVEgOUmcaNcwm9DnrQ6DF4jnvixrkFO8zBaUFarpEoRV124A4zEx6FnW3Ls/T34taLEtkIbAoJIy5lM+3kIcdwQKGuMnSxJ0Q/Ncfqe+AqQ16jGenyRmGofjQMWMhPk7YZQ0FsAVYEVvglX7JrmAbhwJTMi4f81p14n04J4xU4tC7wtZwX0YEDZ5/wa5atB5UinzvbZzowmVv6D8nptj65kgNvELcSElxW/VYmhzhx2A0XrY5Muq9DKaqHPOu1c2S2CArVcLzpnEbNwLqfBP+wG7YVC3ZtirikdL+RWLmOqeBvU2LvFEzx1oKkBAbEt+Vdv3PIo0gM6KXThvKdHnbLEkE62tkYUrPZCDwoRwNtJChjAIb+7BinXEA7VsqvYLXR5lloMp/+vAfIjvDzOUKI5rx607f9TGBBcJOOMQTvGgxQfJm8+VVSqjWpJSZuKQo+ILcEZX7i6Ee+ypL4TSBuPN/hBDuitV74fl20g/K/zACbYbLaJeAHPvVTEFhZvfB/wSxIZiAYDR+dQ/jxQQcEi2gYmqJZhad0QTpv005qSlAZX3kc7B7q9d4GB40/dNSBs1jhoyMIPbHsJnMsj6A4Ku70N0J8aTfBEs7AKQUGbKP2ReoiYq6WcXVXJi/2OxmlP95GE6InyFfuvqlFzUBezIR3VvwNyn4zGkRAb9c0hwn12a0KERMN4N6iQHn3xOX6cMq4qprGIJxiO8/qTukOlx3y+jCNY13/7EH0v0WN7O42xaRGUMaaplCfeq0TQR25qD2tYuxcNRq5xM3Q6Gk1RjfDhv/Dj3OFwvrPjhE5+c/Z4Euohu0BtYb4/87ME5IVto9QdapcZp7wgpOHhxO3XztPbEVSKZ6MG/iYDmnu966QVYrEin7+60383bo72q4vNeFLahM5VjgGsCYv0MpwP2n2aUKBhYx4W2qBgKphr0xkQ+giH80YQ3MID1Sh3hcSA/6Y/wGHpocbZEbrp6JfQO4IVv3Hayuao22NJKnkQFYRYJ+/lHYtapXNhJ7XgyQOOaYiSdKpWeKeHGxTb5r19k7S3GVHX1yi/GC5rlGxGEwoYU5pBg5+7tB+J2rQQXtDNNBTYePI87r3L2NjYDzluBYAXcux6v+OLUBUn6Pm7i2uI/c8xM6AGQ7cNLkMblY9Z2QCg6trpJ1niwkiatrrlC4ltQzQx2VIKUBvPMPUBQ1Pe7V2ERSNqLhZs9OPIWOZWdPrU8Tcdc/1oWDtHGC9IvQjK66KSkN1Z7KAKUEcCRilMlf8ocqBMEhaMwIehSY1uOW0tqSMmY3NlSudYhJO7yOxwuHGy9zyUjEIn3Vu3d36GUVy73mofn2bDgyA42swNSKPho4wEmXrRhEm369Ty2KBq6Uu9r5cZVUJ4pXe0i4IkSRF3mcJ3sGmOfaQSg1N9IBwU+Pu8iykhW5Qz5m/PIPgTOsT3NpxrN0NfPaAA0juhJt0Qq9jq+YexsDIztE9vYSCl/UmDh08nOSFGudTZavfgIpF2gmkyKqv1Z9ASANRm3+OSq9EfzwJxtOQpSi+IG8MXlYH1fA1FV8ATyNniQwzJIYOvnUJZfpfKpSpVjNPBZVv3N7pmnf4Z2p52RhIoq4F12y5wEnn1ryB3Oh8z2GE+c1hw8MvDnYUPQgF/dfmzhpXHoVDSchPff3DRMjwb1OS0jgYOu+4vVBjfKvvLDhm+1bnD0ZOBjNOm7fL1ZhVC6WejlpcIn2auXfujzkLRUc3N18dNEk8aoOgONczN/joIp/j/uFEnaItf0fHZy3gnS65eXoVR0BbDejxtvf9VdGxkLhvUlQiQEECKn+smERdwx9X+VEohr9JuaqnMBmyRpOqSOhOCsYj9lX8KirJei6PL7DburbU6fj0vSLb9zlcninYfQbaUu66hjiqFObZefkZsI3SL/ULyDUB9JBtEV5dBgta0A6Bj8DIVtGbxrFjlce6sDLcHp1dm0snvs1QcFuq+v3dmVMtE7Ift72GBsNR6f5Jrwg3Me3NjLLRnl/cGni98ZVtDiEy+WrVAhLWxDpMYgVfcTiNjx1pOrMX9JIMq3yGtKuvwlmdo1/d642Jcvn2TxdeoSaMO4tnX6U7F0aoFJlW65zCd/M5znhPEd44wL155dUFEFkJt6OYIYw6h6GJ7sd0N8na6awHjO6q4pBp1zwdzMviurKDRK4qURq9ZR7zrtn6paq1+tx0A9Z9jRQ1UaUF4M3E3bFdWTNnDwDcRuaOYaEtTT6xpuIy2kKYz+KTHJ55y1IOCpH4jz4tRRd2sO4+T7l22e5G+taa62AhlaGXxI2ZG1GboWLYkuEroZRkhMcaGId40dQ78EOQn6UFCTuCZe8jvMucu2/o4qE6lODgRp1ViNRt7w4k55M6a0AB0fSG9ZWMl9071N+pXJQc9YlE3VUNSy3sajw7kq4C5yFkRhFWU9sSqP8SFN4JT9OocQIeh4P4M+6D2MY9xDyb337Svv9QUaIjJaaTtsv2y65srrIRF2eClRgkwZQscREw+IVissOgTm5M4Neo6UA1YGStYUaDHETSNN0qpmfue/KztIfj7Dv3p8vdJfsa1sNwj6tGcZKwgGop0tJ2rNR88NWSv200tH8y9xjUKHI160RD5S9zhwHRih/Egiv1/G2mH6vymR3hkMSlKzRKmpQgC3M8UyxsNU/4B40uyISqlkmXYFUaeh3blSwTvV6UiZzdUtlMYiJokKbiq/EbtylduMLMSqWs4RWQFZJw6RiayAnjtl0WDb3T56Z48rAYt5ZvQKkPACSGHtzOJ41TSMo1FjsIrAOpBFpJxG+AKOnsG/urvEWSQaP4IFYzB3kKLtsTz/X3pc6PieyQp8kOtUkcISPtvjnEzUaFxQiZS50Z7jSSjf6VKwVwb/1ohqv+CNm2r1t61PH4RNQBalwL4ruFYYiBRlqqYiuqjPfu+0rzumG4uAyGxrIdkFNGcqhF4QFv2uGZNxlUpQ+UR1kCS/jjEAXEhLE=" />
</div>

<script type="text/javascript">
//<![CDATA[
var theForm = document.forms['form1'];
if (!theForm) {
    theForm = document.form1;
}
function __doPostBack(eventTarget, eventArgument) {
    if (!theForm.onsubmit || (theForm.onsubmit() != false)) {
        theForm.__EVENTTARGET.value = eventTarget;
        theForm.__EVENTARGUMENT.value = eventArgument;
        theForm.submit();
    }
}
//]]>
</script>


<script src="/WebResource.axd?d=pynGkmcFUV13He1Qd6_TZDca2UcMCGEfQb6XtrzIG71ljgeXVg0KtiqOGXw3-6m9vYQcS2CkYjawyMAo3lZ2eg2&amp;t=636681711604795562" type="text/javascript"></script>

<div class="aspNetHidden">

	<input type="hidden" name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="CA0B0334" />
	<input type="hidden" name="__EVENTVALIDATION" id="__EVENTVALIDATION" value="uP+rWXyqcs7N653/uFPHSLLGHuWYdI2iDrwItVSaf25KpptmDxywPoFkFl5tl0wsloAwtocNsNiehbVuVaUhN/8bP2ve9Ro/uSwGGtbwlSPp1LN9sphLiiL9gXfj5Sln" />
</div>
        <div>
            <header>
                <div class="TopPart">
                    <div class="TopPart2">
                        <div class="TopPartBody">
                            <div class="LogoDiv">
                                <a href="http://bilgisayarmuh.cbu.edu.tr/" id="ucWebLogo_lnkBanner">
    <img id="ucWebLogo_imgBanner" src="db_images/banner/logo-1133TR.png" alt="logo" />
</a>

                            </div>
                            <div class="TopMenuPart" style='display:none'>
                                

<div style="float: right">
<script id="dxis_484854873" src="/DXR.axd?r=1_157,1_89,1_149,1_86,1_141,1_147,1_132,1_100,1_108,1_115,1_107,1_139,1_110,1_88,1_114-yDfd9" type="text/javascript"></script><div class="dxmLite_None dxm-ltr">
	<div class="dxm-main dxm-horizontal dxm-noWrap TopMenu" id="ucTopMenu1_mnuTopMaster">
		<ul class="dx dxm-image-l dxm-noImages">
			<li class="dxm-item TopitemStyleCss"><a class="dxm-content dxm-hasText dx" href="katalog.tr.html" style="text-align:right;vertical-align:middle;"><span class="dx-vam dx-nowrap">KATALOG</span></a></li>
		</ul>
	</div><b class="dx-clear"></b>
</div><script id="dxss_505735021" type="text/javascript">
<!--
aspxAddHoverItems('ucTopMenu1_mnuTopMaster',[[['dxm-hovered TopitemStyleCssHover',''],['',''],['DXI0_'],['','T']]]);

var dxo = new ASPxClientMenu('ucTopMenu1_mnuTopMaster');
window['ucTopMenu1_mnuTopMaster'] = dxo;
dxo.uniqueID = 'ctl00$ucTopMenu1$mnuTopMaster';
dxo.renderData={'':[[0]]};
dxo.rootSubMenuFIYOffset=2;
dxo.rootSubMenuLIYOffset=2;
dxo.rootSubMenuYOffset=2;
dxo.shadowVisible=false;
dxo.AfterCreate();

//-->
</script>
    </div>

                            </div>
                            <div class="SearchLangPart">
                                <div class="LangPart">
                                    <div class="DivLang">
                                        <ul>
                                          <li><a id="ucLanguages_rptLang_HyperLink1_0" href="http://en.muhendislik.cbu.edu.tr/computer---about.5335.en.html">EN</a></li>
                                        </ul>
                                    </div>
                                </div>
                                <div class="SearchPart" style='display:none'>
                                    
<div style="width: 40px; height: 40px; background-color: #D92231; float: right;">
    <div class="dxbButton_None dxbButtonSys" id="ucMasterPageSearch1_ASPxButton1" style="-moz-user-select:none;">
	<div class="dxb" style="font-size:0px;">
		<input class="dxb-hb" value="submit" type="submit" name="ctl00$ucMasterPageSearch1$ASPxButton1" /><img class="dx-vam" src="images/icoMasterSearch.png" alt="" />
	</div>
</div><script id="dxss_50094524" type="text/javascript">
<!--
aspxAddHoverItems('ucMasterPageSearch1_ASPxButton1',[[['dxbButtonHover_None'],[''],[''],['','TC']]]);
aspxAddPressedItems('ucMasterPageSearch1_ASPxButton1',[[['dxbButtonPressed_None'],[''],[''],['','TC']]]);
aspxAddDisabledItems('ucMasterPageSearch1_ASPxButton1',[[['dxbDisabled_None'],[''],[''],['','TC']]]);

var dxo = new ASPxClientButton('ucMasterPageSearch1_ASPxButton1');
window['ucMasterPageSearch1_ASPxButton1'] = dxo;
dxo.autoPostBack = true;
dxo.uniqueID = 'ctl00$ucMasterPageSearch1$ASPxButton1';
dxo.Click.AddHandler(function(s, e) {

	if (!ASPxClientEdit.ValidateGroup('Src'))
	{			
		e.processOnServer=false;
	}
});
dxo.RegisterServerEventAssigned(['Click']);
dxo.isTextEmpty = true;
aspxAddSelectedItems('ucMasterPageSearch1_ASPxButton1',[[['dxbf'],[''],['CD']]]);
dxo.AfterCreate();

//-->
</script>
</div>
<div style="width: 360px; height: 40px; background-color: #FFFFFF; float: right;">

    <input type="hidden" id="ucMasterPageSearch1_txtMasterSearch_Raw" name="ucMasterPageSearch1_txtMasterSearch_Raw" value="" /><table id="ucMasterPageSearch1_txtMasterSearch_ET" class="dxeErrorFrame_None MasterSearchTextValid" cellspacing="0" cellpadding="0" style="width:100%;border-collapse:collapse;visibility:hidden;">
	<tr>
		<td class="dxeControlsCell_None" style="width:100%;visibility:visible;"><table class="dxeTextBoxSys dxeTextBox_None MasterSearchTextbox" cellspacing="0" cellpadding="0" id="ucMasterPageSearch1_txtMasterSearch" style="height:40px;width:100%;border-collapse:collapse;">
			<tr>
				<td class="dxic" style="width:100%;padding-left:10px;padding-right:10px;"><input class="dxeEditArea_None dxeEditAreaSys" name="ctl00$ucMasterPageSearch1$txtMasterSearch" onkeyup="aspxEKeyUp(&#39;ucMasterPageSearch1_txtMasterSearch&#39;, event)" value="Site İçi Arama" maxlength="200" id="ucMasterPageSearch1_txtMasterSearch_I" onchange="aspxEValueChanged(&#39;ucMasterPageSearch1_txtMasterSearch&#39;)" onblur="aspxELostFocus(&#39;ucMasterPageSearch1_txtMasterSearch&#39;)" onfocus="aspxEGotFocus(&#39;ucMasterPageSearch1_txtMasterSearch&#39;)" type="text" style="height:100%;" /></td>
			</tr>
		</table></td>
	</tr><tr>
		<td id="ucMasterPageSearch1_txtMasterSearch_EC" class="dxeErrorCell_None" style="font-size:12px;white-space:nowrap;">L&#252;tfen arama yapmak istediğiniz kelimeyi giriniz!</td>
	</tr>
</table><script id="dxss_1010549980" type="text/javascript">
<!--
document.getElementById("ucMasterPageSearch1_txtMasterSearch_ET").setAttribute("errorFrame", "errorFrame");
document.getElementById("ucMasterPageSearch1_txtMasterSearch_I").setAttribute("autocomplete", "off");

var dxo = new ASPxClientTextBox('ucMasterPageSearch1_txtMasterSearch');
window['ucMasterPageSearch1_txtMasterSearch'] = dxo;
dxo.uniqueID = 'ctl00$ucMasterPageSearch1$txtMasterSearch';
dxo.validationGroup = "Src";
dxo.customValidationEnabled = true;
dxo.isValid = true;
dxo.errorText = 'Lütfen arama yapmak istediğiniz kelimeyi giriniz!';
dxo.validationPatterns = [ new ASPxRequiredFieldValidationPattern('Lütfen arama yapmak istediğiniz kelimeyi giriniz!'), new ASPxRegularExpressionValidationPattern('Minimum 4 karakter girmelisiniz!', '^.{4,250}$') ];
dxo.errorDisplayMode = "t";
dxo.RequireStyleDecoration();
dxo.styleDecoration.AddStyle('I','dxeInvalid_None MasterSearchTextInvalid','');
dxo.styleDecoration.AddStyle('F','dxeFocused_None','');
dxo.styleDecoration.AddStyle('N','dxeNullText_None MasterSearchNullText','');
dxo.nullText = 'Site İçi Arama';
dxo.AfterCreate();

//-->
</script>

</div>

                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="TopPartBody">
                        <div class="MainMenuDiv">
                            <div class="dxmLite_None dxm-ltr">
	<div class="dxm-main dxm-horizontal dxm-noWrap MainMenu" id="ucMainMenu1_mnuMaster">
		<ul class="dx dxm-image-l dxm-noImages">
			<li class="dxm-item itemStyleCss dxm-subMenu"><div class="dxm-content dxm-hasText" style="text-align:right;vertical-align:middle;">
				<span class="dx-vam dx-nowrap">B&#246;l&#252;m</span>
			</div><div class="dxm-popOut" style="vertical-align:middle;">
				<img class="dxm-pImage" src="images/MenuArrowDown.png" alt="v" />
			</div></li><li class="dxm-separator" style="padding-left:15px;padding-right:15px;padding-top:12px;"><b style="height:17px;width:2px;background-image:url(images/MainMenuSeparator.jpg);background-repeat:no-repeat;background-position:left center;"></b></li><li class="dxm-item itemStyleCss dxm-subMenu"><div class="dxm-content dxm-hasText" style="text-align:right;vertical-align:middle;">
				<span class="dx-vam dx-nowrap">Eğitim</span>
			</div><div class="dxm-popOut" style="vertical-align:middle;">
				<img class="dxm-pImage" src="images/MenuArrowDown.png" alt="v" />
			</div></li><li class="dxm-separator" style="padding-left:15px;padding-right:15px;padding-top:12px;"><b style="height:17px;width:2px;background-image:url(images/MainMenuSeparator.jpg);background-repeat:no-repeat;background-position:left center;"></b></li><li class="dxm-item itemStyleCss dxm-noSubMenu"><a class="dxm-content dxm-hasText dx" href="akademik-personel.9254.tr.html" target="_parent" style="text-align:right;vertical-align:middle;"><span class="dx-vam dx-nowrap">Akademik Kadro</span></a></li><li class="dxm-separator" style="padding-left:15px;padding-right:15px;padding-top:12px;"><b style="height:17px;width:2px;background-image:url(images/MainMenuSeparator.jpg);background-repeat:no-repeat;background-position:left center;"></b></li><li class="dxm-item itemStyleCss dxm-subMenu"><div class="dxm-content dxm-hasText" style="text-align:right;vertical-align:middle;">
				<span class="dx-vam dx-nowrap">Olanaklar</span>
			</div><div class="dxm-popOut" style="vertical-align:middle;">
				<img class="dxm-pImage" src="images/MenuArrowDown.png" alt="v" />
			</div></li><li class="dxm-separator" style="padding-left:15px;padding-right:15px;padding-top:12px;"><b style="height:17px;width:2px;background-image:url(images/MainMenuSeparator.jpg);background-repeat:no-repeat;background-position:left center;"></b></li><li class="dxm-item itemStyleCss dxm-subMenu"><div class="dxm-content dxm-hasText" style="text-align:right;vertical-align:middle;">
				<span class="dx-vam dx-nowrap">&#214;ğrencilerimiz</span>
			</div><div class="dxm-popOut" style="vertical-align:middle;">
				<img class="dxm-pImage" src="images/MenuArrowDown.png" alt="v" />
			</div></li>
		</ul>
	</div><b class="dx-clear"></b><div id="ucMainMenu1_mnuMaster_DXM0_" style="z-index:20000;display:none;">
		<div class="dxm-shadow dxm-popup SubMenuStlyeCss" style="text-align:Center;">
			<ul class="dx dxm-noImages">
				<li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="bolum/bolum-hakkinda.9250.tr.html" target="_parent" style="text-align:left;"><span class="dx-vam dx-nowrap">Program Hakkında</span></a><b class="dx-clear"></b></li><li class="dxm-spacing" style="height:1px;"></li><li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="bolum/faaliyet-komisyonlari.9251.tr.html" target="_parent" style="text-align:left;"><span class="dx-vam dx-nowrap">Faaliyet Komisyonları ve Organizasyon Şeması</span></a><b class="dx-clear"></b></li><li class="dxm-spacing" style="height:1px;"></li><li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="bolum/baskana-mesaj.8815.tr.html" target="_parent" style="text-align:left;"><span class="dx-vam dx-nowrap">Başkana Mesaj</span></a><b class="dx-clear"></b></li>
			</ul>
		</div>
	</div><div id="ucMainMenu1_mnuMaster_DXM1_" style="z-index:20000;display:none;">
		<div class="dxm-shadow dxm-popup SubMenuStlyeCss" style="text-align:Center;">
			<ul class="dx dxm-noImages">
				<li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/new-curriculum.pdf" target="_blank" style="text-align:left;"><span class="dx-vam dx-nowrap">&#214;ğretim Planı</span></a><b class="dx-clear"></b></li><li class="dxm-spacing" style="height:1px;"></li><li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/previous-curriculum.pdf" target="_blank" style="text-align:left;"><span class="dx-vam dx-nowrap">&#214;nceki &#214;ğretim Planı</span></a><b class="dx-clear"></b></li><li class="dxm-spacing" style="height:1px;"></li><li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="egitim/ders-programi.19495.tr.html" target="_blank" style="text-align:left;"><span class="dx-vam dx-nowrap">Ders Programı</span></a><b class="dx-clear"></b></li><li class="dxm-spacing" style="height:1px;"></li><li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="egitim/staj.9252.tr.html" target="_parent" style="text-align:left;"><span class="dx-vam dx-nowrap">Staj</span></a><b class="dx-clear"></b></li><li class="dxm-spacing" style="height:1px;"></li><li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="http://cse.cbu.edu.tr/moodle/" target="_blank" style="text-align:left;"><span class="dx-vam dx-nowrap">Moodle</span></a><b class="dx-clear"></b></li><li class="dxm-spacing" style="height:1px;"></li><li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="egitim/yandal-ve-cap-programlari.11754.tr.html" target="_parent" style="text-align:left;"><span class="dx-vam dx-nowrap">Yandal ve &#199;ap Programları</span></a><b class="dx-clear"></b></li><li class="dxm-spacing" style="height:1px;"></li><li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="http://bilgisayarmuh.cbu.edu.tr/db_images/file/mcbu_bil_muh_lisans_tez_yazim_kurallari.doc" target="_blank" style="text-align:left;"><span class="dx-vam dx-nowrap">Tez Yazım Kuralları</span></a><b class="dx-clear"></b></li>
			</ul>
		</div>
	</div><div id="ucMainMenu1_mnuMaster_DXM3_" style="z-index:20000;display:none;">
		<div class="dxm-shadow dxm-popup SubMenuStlyeCss" style="text-align:Center;">
			<ul class="dx dxm-noImages">
				<li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="olanaklar/laboratuar-olanaklari.9256.tr.html" target="_parent" style="text-align:left;"><span class="dx-vam dx-nowrap">Laboratuvar Olanakları</span></a><b class="dx-clear"></b></li><li class="dxm-spacing" style="height:1px;"></li><li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="olanaklar/kampuste-yasam.9257.tr.html" target="_parent" style="text-align:left;"><span class="dx-vam dx-nowrap">Kamp&#252;ste Yaşam</span></a><b class="dx-clear"></b></li><li class="dxm-spacing" style="height:1px;"></li><li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="olanaklar/manisa-sehri.9258.tr.html" target="_parent" style="text-align:left;"><span class="dx-vam dx-nowrap">Manisa Şehri</span></a><b class="dx-clear"></b></li><li class="dxm-spacing" style="height:1px;"></li><li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="http://erasmus.cbu.edu.tr" target="_blank" style="text-align:left;"><span class="dx-vam dx-nowrap">Uluslarası İlişkiler Birimi</span></a><b class="dx-clear"></b></li><li class="dxm-spacing" style="height:1px;"></li><li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="http://usitem.cbu.edu.tr" target="_blank" style="text-align:left;"><span class="dx-vam dx-nowrap">CB&#220; USİTEM</span></a><b class="dx-clear"></b></li><li class="dxm-spacing" style="height:1px;"></li><li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="http://www.cbu.edu.tr" target="_blank" style="text-align:left;"><span class="dx-vam dx-nowrap">Celal Bayar &#220;niversitesi</span></a><b class="dx-clear"></b></li><li class="dxm-spacing" style="height:1px;"></li><li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="http://muhendislik.cbu.edu.tr" target="_blank" style="text-align:left;"><span class="dx-vam dx-nowrap">M&#252;hendislik Fak&#252;ltesi</span></a><b class="dx-clear"></b></li>
			</ul>
		</div>
	</div><div id="ucMainMenu1_mnuMaster_DXM4_" style="z-index:20000;display:none;">
		<div class="dxm-shadow dxm-popup SubMenuStlyeCss" style="text-align:Center;">
			<ul class="dx dxm-noImages">
				<li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="http://bilgisayarmuh.cbu.edu.tr/db_images/file/mcbu_bil_muh_ozgecmis_katalogu_2017_2018_ibs.pdf" target="_blank" style="text-align:left;"><span class="dx-vam dx-nowrap">2017-2018 Bil. M&#252;h. &#214;.K.</span></a><b class="dx-clear"></b></li><li class="dxm-spacing" style="height:1px;"></li><li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="http://bilgisayarmuh.cbu.edu.tr/db_images/file/mcbu_bil_muh_ozgecmis_katalogu_2016_2017_ibs.pdf" target="_blank" style="text-align:left;"><span class="dx-vam dx-nowrap">2016-2017 Bil. M&#252;h. &#214;.K.</span></a><b class="dx-clear"></b></li><li class="dxm-spacing" style="height:1px;"></li><li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="ogrencilerimiz/mezunlarimiz.22788.tr.html" target="_parent" style="text-align:left;"><span class="dx-vam dx-nowrap">Mezunlarımız</span></a><b class="dx-clear"></b></li><li class="dxm-spacing" style="height:1px;"></li><li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="ogrencilerimiz/basarilarimiz.22774.tr.html" target="_parent" style="text-align:left;"><span class="dx-vam dx-nowrap">&#214;ğrencilerimizin Başarıları</span></a><b class="dx-clear"></b></li><li class="dxm-spacing" style="height:1px;"></li><li class="dxm-item SubMenuItemStlyeCss"><a class="dxm-content dxm-hasText dx" href="ogrencilerimiz/bitirme-tezleri.22777.tr.html" target="_parent" style="text-align:left;"><span class="dx-vam dx-nowrap">Bitirme Tezleri</span></a><b class="dx-clear"></b></li>
			</ul>
		</div>
	</div>
</div><script id="dxss_1999367455" type="text/javascript">
<!--
aspxAddHoverItems('ucMainMenu1_mnuMaster',[[['dxm-hovered itemStyleCssHover','',''],['','',''],['DXI0_','DXI1_','DXI3_','DXI4_'],['','P','T']],[[''],[''],['DXME0_','DXMBC0_','DXME1_','DXMBC1_','DXME3_','DXMBC3_','DXME4_','DXMBC4_']],[['dxm-hovered SubMenuItemStlyeHoverCss',''],['',''],['DXI0i0_','DXI0i1_','DXI0i2_','DXI1i0_','DXI1i1_','DXI1i2_','DXI1i3_','DXI1i4_','DXI1i5_','DXI1i6_','DXI3i0_','DXI3i1_','DXI3i2_','DXI3i3_','DXI3i4_','DXI3i5_','DXI3i6_','DXI4i0_','DXI4i1_','DXI4i2_','DXI4i3_','DXI4i4_'],['','T']],[['dxm-hovered itemStyleCssHover',''],['',''],['DXI2_'],['','T']]]);

var dxo = new ASPxClientMenu('ucMainMenu1_mnuMaster');
window['ucMainMenu1_mnuMaster'] = dxo;
dxo.uniqueID = 'ctl00$ucMainMenu1$mnuMaster';
dxo.renderData={'':[[0],[1],[2],[3],[4]],'0':[[0],[1],[2]],'1':[[0],[1],[2],[3],[4],[5],[6]],'3':[[0],[1],[2],[3],[4],[5],[6]],'4':[[0],[1],[2],[3],[4]]};
dxo.rootSubMenuFIYOffset=4;
dxo.rootSubMenuLIYOffset=4;
dxo.rootSubMenuYOffset=4;
dxo.shadowVisible=false;
dxo.AfterCreate();

//-->
</script>


                        </div>
                    </div>

                </div>
            </header>
            <div class="MasterDiv">

                
                <div class="MasterPagesDiv">
                    

    
    
    

    
    <div class="SliderCloseBck">
        

<div class="SliderCloseBck1">
    <div class="SliderDiv">
        <div style="float: left; width: 700px; height: 525px; background-color: #404041;">
            <div class="flexslider" style="min-width: 700px; max-width: 700px; margin-left: auto; margin-right: auto;">
                <ul class="slides">
                    
                            <li>
                                <div style="width: 700px; position: relative;">
                                    
                                </div>
                                <a id="ContentPlaceHolder1_ucSlider1_RepeaterAllRows_HyperLink2_0" title="TübitakProjeBölgeSergisi"><img title="TübitakProjeBölgeSergisi" src="db_images/slider/img_slider_9221_Slayt6.png" alt="" /></a>
                            </li>
                        
                            <li>
                                <div style="width: 700px; position: relative;">
                                    
                                </div>
                                <a id="ContentPlaceHolder1_ucSlider1_RepeaterAllRows_HyperLink2_1" title="1"><img title="1" src="db_images/slider/img_slider_6518_Slide1.png" alt="" /></a>
                            </li>
                        
                            <li>
                                <div style="width: 700px; position: relative;">
                                    
                                </div>
                                <a id="ContentPlaceHolder1_ucSlider1_RepeaterAllRows_HyperLink2_2" title="2"><img title="2" src="db_images/slider/img_slider_6410_Slide2.PNG" alt="" /></a>
                            </li>
                        
                            <li>
                                <div style="width: 700px; position: relative;">
                                    
                                </div>
                                <a id="ContentPlaceHolder1_ucSlider1_RepeaterAllRows_HyperLink2_3" title="Erasmus Anlaşmalarımız"><img title="Erasmus Anlaşmalarımız" src="db_images/slider/img_slider_9249_Slayt3.png" alt="" /></a>
                            </li>
                        
                            <li>
                                <div style="width: 700px; position: relative;">
                                    
                                </div>
                                <a id="ContentPlaceHolder1_ucSlider1_RepeaterAllRows_HyperLink2_4" title="İntörn Eğitim"><img title="İntörn Eğitim" src="db_images/slider/img_slider_9250_Slayt4.png" alt="" /></a>
                            </li>
                        
                            <li>
                                <div style="width: 700px; position: relative;">
                                    
                                </div>
                                <a id="ContentPlaceHolder1_ucSlider1_RepeaterAllRows_HyperLink2_5" title="Modern Laboratuvar Altyapısı"><img title="Modern Laboratuvar Altyapısı" src="db_images/slider/img_slider_9251_Slide5.jpg" alt="" /></a>
                            </li>
                        
                </ul>
            </div>
        </div>
        <div style="float: right; width: 440px; height: 525px; background-color: #404041;">
            
            

<div class="CustomNewsDiv">

    <div class="CustomNewsTab1">
        <h4 class="CustomNewsHeader1">
            DUYURULAR
        </h4>
    </div>

    <div class="CustomNewsTab2">
        <div class="CustomNewsHeaderBtn dxbButton_None dxbButtonSys" id="ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_ASPxButton2" style="-moz-user-select:none;">
	<div class="dxb">
		<input class="dxb-hb" value="HABERLER" type="submit" name="ctl00$ContentPlaceHolder1$ucSlider1$ucCustomNewsBlock1$ASPxButton2" /><span class="dx-vam">HABERLER</span>
	</div>
</div><script id="dxss_1927032172" type="text/javascript">
<!--
aspxAddHoverItems('ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_ASPxButton2',[[['dxbButtonHover_None'],[''],[''],['','TC']]]);
aspxAddPressedItems('ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_ASPxButton2',[[['dxbButtonPressed_None'],[''],[''],['','TC']]]);

var dxo = new ASPxClientButton('ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_ASPxButton2');
window['ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_ASPxButton2'] = dxo;
dxo.autoPostBack = true;
dxo.uniqueID = 'ctl00$ContentPlaceHolder1$ucSlider1$ucCustomNewsBlock1$ASPxButton2';
dxo.RegisterServerEventAssigned(['Click']);
aspxAddSelectedItems('ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_ASPxButton2',[[['dxbf'],[''],['CD']]]);
dxo.AfterCreate();

//-->
</script>
    </div>

    <div style="float: left; width: 440px; height: 455px;">
        <div style="margin-top: 15px; margin-left: 15px; width: 410px; height: 425px;"> 
            <div id="sc1" style="width: 410px; height: 393px; overflow-y: scroll;">
                <ul>
                    
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/cse-3246-cyber-securitydersiptal.pdf' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">01.Eki.18 :: Genel</h4>
                                    <p class="CustomLiP">CSE 3246 Cyber Security Dersi ile İlgili!</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/cvduyuru24.09.pdf' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">24.Eyl.18 :: Genel</h4>
                                    <p class="CustomLiP">3. VE 4. SINIF ÖĞRENCİLERİNİN DİKKATİNE!</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/danismanlik-saatleriv2.pdf' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">21.Eyl.18 :: Genel</h4>
                                    <p class="CustomLiP">Danışmanlık Saatleri</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/graduationdersekleme20.09.pdf' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">20.Eyl.18 :: Genel</h4>
                                    <p class="CustomLiP">Graduation Project I ve II Dersinin Birlikte Alınması ile İgili ÖNEMLİ ! </p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/sosyalsorumluluk20.09.pdf' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">20.Eyl.18 :: Genel</h4>
                                    <p class="CustomLiP">Social Responsibility Project Dersi ile İlgili</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/dersprogramiguncelleme.pdf' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">19.Eyl.18 :: Genel</h4>
                                    <p class="CustomLiP">Güz Dönemi Ders Programı (GÜNCELLEME)</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/ogrencitemsilciligiduyuru18.09.pdf' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">18.Eyl.18 :: Genel</h4>
                                    <p class="CustomLiP">Öğrenci Temsilciliği Adaylık Başvurusu</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/stajraporduyuru18.09.pdf' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">18.Eyl.18 :: Genel</h4>
                                    <p class="CustomLiP">Staj Raporları ile İlgili</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/ders-programi.19495.tr.html' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">17.Eyl.18 :: Genel</h4>
                                    <p class="CustomLiP">Bil. Müh. 2018-2019 Güz Yarıyılı Ders Programı
</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/derssecimi13.09.2018.pdf' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">13.Eyl.18 :: Genel</h4>
                                    <p class="CustomLiP">Teknik Seçmeli Ders Kontenjanları ile İlgili</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/duyuru13.09.2018.pdf' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">13.Eyl.18 :: Genel</h4>
                                    <p class="CustomLiP">Graduation Project II dersi ile ilgili ÖNEMLİ DUYURU !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/engineering-design-ii-ve-graduation-project-ii-derslerinden-butunlemeye-girecek-ogrencilerin-dikkatine.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">21.Haz.18 :: Genel</h4>
                                    <p class="CustomLiP">Design Project II ve Graduation Project II Bütünleme Duyurusu</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/dp-gp-rapor-duyuru-haziran-2018.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">31.May.18 :: Genel</h4>
                                    <p class="CustomLiP">Design Project ve Graduation Project Tez Raporları Duyurusu</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/gbyf-posterduyuru22.05.2018.pdf' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">22.May.18 :: Genel</h4>
                                    <p class="CustomLiP">GBYF yarışmasına katılan öğrencilerin dikkatine!</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/dp-gp-sunum-programi.pdf' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">21.May.18 :: Genel</h4>
                                    <p class="CustomLiP">Design Project ve Graduation Project Sunum Programları !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/yds-akademi21.05.2018.jpg' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">21.May.18 :: Genel</h4>
                                    <p class="CustomLiP">YDS Academy Semineri</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/eteration-yazilim-okulu-2018-.jpg' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">17.May.18 :: Genel</h4>
                                    <p class="CustomLiP">Eteration Yazılım Okulu</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/eset-stajyer-ilan-mayis-2018.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">17.May.18 :: Genel</h4>
                                    <p class="CustomLiP">Eset Firması Stajyer İlanı</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/atolye15stajkampi09.05.2018.pdf' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">09.May.18 :: Genel</h4>
                                    <p class="CustomLiP">Atölye 15 Staj Kampı CBÜ</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/gbyf2018.pdf' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">08.May.18 :: Genel</h4>
                                    <p class="CustomLiP">Genç Beyinler Yeni Fikirler Proje Fikir Yarışması </p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/ieee-esas--2018.pdf' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">08.May.18 :: Genel</h4>
                                    <p class="CustomLiP">IEEE ESAS '18
</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/duyuru08.05.2018.pdf' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">08.May.18 :: Genel</h4>
                                    <p class="CustomLiP">Erasmus Bilgilendirme Oturumları</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/duyuru02.05.2018.pdf' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">02.May.18 :: Genel</h4>
                                    <p class="CustomLiP">Stajyer İlanı</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/proje-pazari-haziran-2018.png' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">27.Nis.18 :: Genel</h4>
                                    <p class="CustomLiP">Proje Pazarı</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/duyuru19.04.2018.pdf' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">19.Nis.18 :: Genel</h4>
                                    <p class="CustomLiP">Stajyer İlanı</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/staj-tarihleri-duyuru17.04.2018.pdf' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">17.Nis.18 :: Genel</h4>
                                    <p class="CustomLiP">Staj Yapacak Öğrencilerin Dikkatine</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/duyuru13nisan.pdf' target='_parent' title='Genel'>
                                    <h4 class="CustomLiHeader">13.Nis.18 :: Genel</h4>
                                    <p class="CustomLiP">Graduation Project (I-II) ve Computer Engineering Design (I-II) Dersini Alan Öğrencilerimizin Dikkatine</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/ced-gp-sunum-duyuru-nisan-2018.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">28.Mar.18 :: Genel</h4>
                                    <p class="CustomLiP">Design Project ve Graduation Project Sunum Programları !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/gbyf-2018-duyuru.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">09.Mar.18 :: Genel</h4>
                                    <p class="CustomLiP">GBYF 2018 Proje Yarışmaları Etkinliği Duyurusu</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/odtu-programlama-yarismasi-2018.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">09.Mar.18 :: Genel</h4>
                                    <p class="CustomLiP">ODTÜ Bilgisayar Topluluğu Geleneksel Programlama Yarışması Duyurusu</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/bilmok-sonuc-mart-2018.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">05.Mar.18 :: Genel</h4>
                                    <p class="CustomLiP">BİLMÖK Temsilci Aday Öğrenci Sonucu </p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/havelsan-is-duyurusu-mart-2018.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">05.Mar.18 :: Genel</h4>
                                    <p class="CustomLiP">HAVELSAN İş Duyurusu !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/turquality-semineri-subat-2018.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">27.Şub.18 :: Genel</h4>
                                    <p class="CustomLiP">Turquality Semineri Duyurusu</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/ogrenci-temsilcisi-secim-duyurusu-2018.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">26.Şub.18 :: Genel</h4>
                                    <p class="CustomLiP">Öğrenci Temsilcisi Seçimi Adaylık Duyurusu</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/bilmok2018-duyuru.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">22.Şub.18 :: Genel</h4>
                                    <p class="CustomLiP">BİLMÖK 2018 Duyurusu </p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/ders-secimi-onemli-duyuru-subat-2018.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">20.Şub.18 :: Genel</h4>
                                    <p class="CustomLiP">Ders Seçimi Hakkında Çok Önemli Duyuru !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/burs-alan-ogrenciler-subat-2018.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">19.Şub.18 :: Genel</h4>
                                    <p class="CustomLiP">Burs Alan Öğrenci Kurum Bilgileri</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/sw-testing-ilkders-duyuru-subat-2018.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">13.Şub.18 :: Genel</h4>
                                    <p class="CustomLiP">Software Testing Dersini Alan Öğrenciler İçin Acil Duyuru !!!</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/teknik-secmeli-ders-secim-subat-2018.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">09.Şub.18 :: Genel</h4>
                                    <p class="CustomLiP">Kontenjan Sorunu Nedeniyle Teknik Seçmeli Derslere Kayıt İşleminde Sorun Yaşayan Öğrencilerimize Duyuru !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/ders-secme-bilgi-duyuru-subat-2018.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">07.Şub.18 :: Genel</h4>
                                    <p class="CustomLiP">Ders Seçme İşlemleri Hakkında Önemli Duyuru !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/swtesting-dersi-duyuru-subat-2018.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">05.Şub.18 :: Genel</h4>
                                    <p class="CustomLiP">Software Testing Dersi Hakkında Acil Duyuru !!</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/endustri-ders-eksik-akts-duyurusu.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">01.Şub.18 :: Genel</h4>
                                    <p class="CustomLiP">Endüstri Mühendisliği Bölümünden Ders Almış Olan Öğrencilerimizin Dikkatine !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/sw-testing-dersi-duyuru-ocak-2018-v2.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">24.Oca.18 :: Genel</h4>
                                    <p class="CustomLiP">Software Testing Dersi Hakkında Önemli Duyuru ! (Güncellendi !)</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/ss-projeleri-rapor-duyuru-ocak-2018.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">09.Oca.18 :: Genel</h4>
                                    <p class="CustomLiP">Sosyal Sorumluluk Projeleri Rapor Duyurusu !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/ced-gp-sunum-duyuru-ocak-2018-v2.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">09.Oca.18 :: Genel</h4>
                                    <p class="CustomLiP">Design Project ve Graduation Project Sunum Programları ! </p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/co-quiz-duyurusu-aralik-2017.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">20.Ara.17 :: Genel</h4>
                                    <p class="CustomLiP">Computer Organization Dersi Quiz Duyurusu !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://www.mcbu.edu.tr/x-cf2ce369-4bbc-4ab5-aebc-b415a4c59862' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">12.Ara.17 :: Genel</h4>
                                    <p class="CustomLiP">ÖNEMLİ !!! Erasmus-Mevlana Değişim Programları Sınav Yeri ve Saati Değişikliği Hakkında Önemli Duyuru !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/2018-2019-akademik-yili-erasmus-ogrenci-ogrenim-hareketliligi-takvimi-(1).pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">07.Ara.17 :: Genel</h4>
                                    <p class="CustomLiP">2018 – 2019 Akademik Yılı Erasmus+ Programı Öğrenci Öğrenim Hareketliliği Başvuru Takvimi</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/staj-hareketliligi-basvuru-takvimi.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">07.Ara.17 :: Genel</h4>
                                    <p class="CustomLiP">2017 – 2018 Erasmus+ Programı Staj Hareketliliği Başvuru Takvimi</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/etkinlik-duyurusu-12-aralik-2017.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">04.Ara.17 :: Genel</h4>
                                    <p class="CustomLiP">Aramızdaki Teknoloji'17 Etkinlik Duyurusu !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/staj-firma-duyurusu-aralik-2017.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">04.Ara.17 :: Genel</h4>
                                    <p class="CustomLiP">GEN ARGE firması stajyer duyurusu !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/telafi-duyuru-kasim-2017.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">24.Kas.17 :: Genel</h4>
                                    <p class="CustomLiP">Ders Telafi Duyurusu !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/social-responsibility-project-duyuru-kasim-2017.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">23.Kas.17 :: Genel</h4>
                                    <p class="CustomLiP">Social Responsibility Project Dersini alan öğrencilerin dikkatine!</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/dp-duyuru-yeni.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">13.Kas.17 :: Genel</h4>
                                    <p class="CustomLiP">Design Project Sunumları Tarih Değişikliği !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/gp-sunum-programi-kasim-2017-v3.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">12.Kas.17 :: Genel</h4>
                                    <p class="CustomLiP">Graduation Project Sunum Programı !  (Sunumlar C-201 Bil. Labında Yapılacaktır.)</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/dp-sunum-programi-kasim-2017-v3.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">12.Kas.17 :: Genel</h4>
                                    <p class="CustomLiP">Design Project Sunum Programı ! (Sunumlar C-201 Bil. Labında Yapılacaktır.)</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/dp-gp-kasim-2017.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">01.Kas.17 :: Genel</h4>
                                    <p class="CustomLiP">Design Project ve Graduation Project sunumları duyurusu !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/bmo-etkinligi-24-ekim-2017-guncel.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">20.Eki.17 :: Genel</h4>
                                    <p class="CustomLiP">BMO Etkinlik Duyurusu (Güncellenmiş Hali) !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/net-programming-dersi-bilgi-ekim-2017.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">18.Eki.17 :: Genel</h4>
                                    <p class="CustomLiP">.Net Programming Dersini Alan Öğrencilerimizin Dikkatine !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/17ekimafis.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">14.Eki.17 :: Genel</h4>
                                    <p class="CustomLiP">17 Ekim 2017 Etkinlik Afişi</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/ced-gp-proje-duyurusu-ekim-2017.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">09.Eki.17 :: Genel</h4>
                                    <p class="CustomLiP">Computer Engineering Design ve Graduation Project Proje Duyurusu !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/ssprojeleri-duyuru-2017.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">06.Eki.17 :: Genel</h4>
                                    <p class="CustomLiP">Sosyal Sorumluluk Projeleri Duyurusu</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/ced-2-duyuru-ekim-2017.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">05.Eki.17 :: Genel</h4>
                                    <p class="CustomLiP">Computer Engineering Design II dersi hakkında önemli duyuru ! </p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/cv-duyurusu-2018.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">26.Eyl.17 :: Genel</h4>
                                    <p class="CustomLiP">3. VE 4. SINIF ÖĞRENCİLERİNİN DİKKATİNE !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://www.bmo.org.tr/2017/07/03/bmo-genc-yaz-egitim-kampi-basliyor/' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">04.Tem.17 :: Genel</h4>
                                    <p class="CustomLiP">BMO-Genç Yaz Eğitim Kampı Duyurusu</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/yaz-okulu-duyuru.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">07.Haz.17 :: Genel</h4>
                                    <p class="CustomLiP">Farklı Üniversitelerde Açılan Yaz Okullarından Ders Almak İçin</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/2016-2017-yaz-okulu-basvuru-dilekcesi-(3)-(3).docx' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">07.Haz.17 :: Genel</h4>
                                    <p class="CustomLiP">2016-2017 Yaz Okulu Başvuru Dilekçesi</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://gbyf.org.tr/gbyf2017-kazanan.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">07.Haz.17 :: Genel</h4>
                                    <p class="CustomLiP">GBYF 2017 Kazananların Listesi</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://gbyf.org.tr/GBYF2017-Kitap.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">07.Haz.17 :: Genel</h4>
                                    <p class="CustomLiP">GBYF 2017 Kitapçığı</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/ced-gp-rapor-toplama-2017.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">02.Haz.17 :: Genel</h4>
                                    <p class="CustomLiP">Computer Engineering Design ve Graduation Project Dersleri için rapor toplama duyurusu</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/ced-gp-program-mayis-2017.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">28.May.17 :: Genel</h4>
                                    <p class="CustomLiP">Computer Engineering Design ve Graduation Project Dersleri Sunum Programı</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/gbyf17-gidis-donus-bilgileri2.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">24.May.17 :: Genel</h4>
                                    <p class="CustomLiP">GBYF 2017 GİDİŞ-DÖNÜŞ BİLGİLERİ</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/staj-duyuru-mayis-2017-guncel.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">09.May.17 :: Genel</h4>
                                    <p class="CustomLiP">STAJ DUYURUSU - EVRAK TESLİM TARİHLERİ ! (Güncellendi !)</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/yaz-kismi-zamanli-is-ilani-mayis-2017.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">24.May.17 :: Genel</h4>
                                    <p class="CustomLiP">Kısmi Zamanlı Öğrenci İş İlanı !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/final-sinavlari-degisiklik-2017-guncel.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">17.May.17 :: Genel</h4>
                                    <p class="CustomLiP">ÖNEMLİ UYARI : Final Sınav Programı Güncellemesi !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/gbyf-2017-katilim-formu-duyurusu2.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">18.May.17 :: Genel</h4>
                                    <p class="CustomLiP">GBYF 2017 MCBÜ KATILIM FORMU</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/ced-gp-duyuru-mayis-2017.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">16.May.17 :: Genel</h4>
                                    <p class="CustomLiP">Computer Engineering Design ve Graduation Project Derslerini Alan Öğrencilerimizin Dikkatine !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/kismi-zamanli-is-ilani-2017.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">27.Nis.17 :: Genel</h4>
                                    <p class="CustomLiP">Kısmi Zamanlı İş İlanı !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/bil-kariyer-zirvesi-2017.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">27.Nis.17 :: Genel</h4>
                                    <p class="CustomLiP">Bilişimde Kariyer Zirvesi 2017</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/cv-duyurusu-2017.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">05.Nis.17 :: Genel</h4>
                                    <p class="CustomLiP">3. VE 4. SINIF ÖĞRENCİLERİNİN DİKKATİNE !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/ced-gp-abstract-duyuru.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">29.Mar.17 :: Genel</h4>
                                    <p class="CustomLiP">Computer Engineering Design ve Graduation Project Dersleri Hakkında Önemli Duyuru !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/softtech-seminer-goruntuler.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">30.Mar.17 :: Genel</h4>
                                    <p class="CustomLiP">Softtech Firması bölümümüz öğrencilerine "yazılım teknolojileri ve süreçleri" hakkında seminer verdi.</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/softtech-poster.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">20.Mar.17 :: Genel</h4>
                                    <p class="CustomLiP">Softtech Firması Seminer Duyurusu - Poster</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/softtech-duyuru-mart-2017.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">16.Mar.17 :: Genel</h4>
                                    <p class="CustomLiP">Softtech Firması Seminer Duyurusu !</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='https://docs.google.com/forms/d/e/1FAIpQLSeGqJZgHV_3NrNEaiVIpM0otQAJ4lPYP5hjQXfRIKCGMs8XdQ/viewform?c=0&w=1' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">24.Şub.17 :: Genel</h4>
                                    <p class="CustomLiP">BİLMÖK-Ege Bölgesi Üniversiteleri Öğrencileri Katılım Formu</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/bilmok-2017-afis.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">24.Şub.17 :: Genel</h4>
                                    <p class="CustomLiP">BİLMÖK 2017 Duyurusu</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/dersler-saat-degisiklikleri.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">15.Şub.17 :: Genel</h4>
                                    <p class="CustomLiP">Öğrencilerimizin Dikkatine ! (Ders Saat Değişiklikleri)</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/edp-gp-duyuru-31.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">08.Şub.17 :: Genel</h4>
                                    <p class="CustomLiP">Computer Engineering Design ve Graduation Project Dersleri Hakkında Önemli Duyuru 3</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/edp-gp-duyuru-21.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">07.Şub.17 :: Genel</h4>
                                    <p class="CustomLiP">Computer Engineering Design ve Graduation Project Dersleri Hakkında Önemli Duyuru 2</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/edp-gp-duyuru-11.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">07.Şub.17 :: Genel</h4>
                                    <p class="CustomLiP">Computer Engineering Design ve Graduation Project Dersleri Hakkında Önemli Duyuru 1 </p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/evaluation-of-design-and-gra-projects.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">12.Oca.17 :: Genel</h4>
                                    <p class="CustomLiP">EVALUATION OF DESIGN PROJECTS AND GRADUATION PROJECTS (ERTELENEN SINAVLAR NEDENİYLE YENİLENEN TARİHLERE DİKKAT EDİNİZ !!!)</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/2016-2017-fall-staj.docx' target='_blank' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">05.Oca.17 :: Öğrenci</h4>
                                    <p class="CustomLiP">Ekli listedeki öğrencilerin staj raporları ile ilgili 10 Ocak Salı günü 9:30-12:30 arasında Yrd.Doç.Dr. Didem Abidin'i görmeleri ger ...</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/evaluation-of-design-projects-and-graduation-projects.docx' target='_blank' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">21.Ara.16 :: Öğrenci</h4>
                                    <p class="CustomLiP">EVALUATION OF DESIGN PROJECTS AND GRADUATION PROJECTS</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='/' target='_parent' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">21.Ara.16 :: Öğrenci</h4>
                                    <p class="CustomLiP">Fakültemizde Zaimoğlu Holding ile 22.12.2016 tarihinde tanışma toplantısı yapılacaktır.</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/muradiye---muhendislik-fakultesi.pdf' target='_blank' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">20.Ara.16 :: Öğrenci</h4>
                                    <p class="CustomLiP">Erasmus+ ve ESN Bilgilendirme Seminerleri</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='/' target='_parent' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">08.Ara.16 :: Öğrenci</h4>
                                    <p class="CustomLiP">Formal Languages dersinin vize kağıdını 14 Aralık Çarşamba günü görebilirsiniz.</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/tecrube-konusuyor-kahramanlar-projesi.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">18.Kas.16 :: Genel</h4>
                                    <p class="CustomLiP">Tecrübe Konuşuyor Kahramanlar Projesi</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/secimsonucu.pdf' target='_blank' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">03.Kas.16 :: Öğrenci</h4>
                                    <p class="CustomLiP">Bölümümüzün Öğrenci Temsilcisi Seçimi sonuçlanmıştır. Sonuçlar için tıklayınız.</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/ogrencitemsilcisisecimi.pdf' target='_blank' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">18.Eki.16 :: Öğrenci</h4>
                                    <p class="CustomLiP">Bölümümüzün Öğrenci Temsilcisi ilk tur seçimi 01.11.2016 Salı günü yapılacaktır. Detaylı bilgi için tıklayınız..</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/intibak.2016.09.29.pdf' target='_blank' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">19.Eyl.16 :: Öğrenci</h4>
                                    <p class="CustomLiP">İntibakı yapılan öğrencilere ait Ders İntibak Tabloları için tıklayınız.
(29.09.2016 tarihinde güncellenmiştir)</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='/' target='_blank' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">28.Tem.16 :: Öğrenci</h4>
                                    <p class="CustomLiP">Yeni kayıt olan veya halen okuyan fakat raporunu teslim etmemiş engelli öğrencilerimizden varsa engellilik raporlarını 15 Ekim 2016  ...</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='/' target='_parent' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">28.Tem.16 :: Öğrenci</h4>
                                    <p class="CustomLiP">2016 Yaz Okulu Vize sınavları 01-05 Ağustos 2016 tarihleri arasında yapılacaktır.</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/yaz-okulu-duyuru.pdf' target='_blank' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">07.Haz.16 :: Öğrenci</h4>
                                    <p class="CustomLiP">Yaz Okulu Hakkında Önemli Duyuru</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://muhendislik.cbu.edu.tr/db_images/site_100/file/Mazeret_2015_2016_Bahar.xlsx' target='_blank' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">04.May.16 :: Öğrenci</h4>
                                    <p class="CustomLiP">2015-2016 Bahar Dönemi Vize Mazeret Sınavları</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='/' target='_parent' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">04.May.16 :: Öğrenci</h4>
                                    <p class="CustomLiP">5 Mayıs 2016 Perşembe günü yapılacak olan Logic Design dersleri iptal olmuştur.</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='/' target='_parent' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">25.Nis.16 :: Öğrenci</h4>
                                    <p class="CustomLiP">Mathematics II - Quiz Duyurusu (Yrd.Doç.Dr. Gökşen BACAK TURAN)
12 Mayıs 2016 Perşembe 17:00</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/gbyf-afis(1).pdf' target='_blank' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">22.Nis.16 :: Öğrenci</h4>
                                    <p class="CustomLiP">Genç Beyinler Yeni Fikirler - Proje Pazarı ve Bitirme Projeleri Ortak Sergisi</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/bau-ccna-kurs.pdf' target='_blank' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">22.Nis.16 :: Öğrenci</h4>
                                    <p class="CustomLiP">Balıkesir Üniversitesi - ‘'CCNA (Cisco Certified Network Association) Kursu''</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/yildirimyarislari2016.pdf' target='_blank' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">22.Nis.16 :: Öğrenci</h4>
                                    <p class="CustomLiP">Yıldırım Beyazıt Üniversitesi  ‘'Yıldırım Yarışları 2016'' </p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/tubitak-bilgem.pdf' target='_blank' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">11.Nis.16 :: Öğrenci</h4>
                                    <p class="CustomLiP">TÜBİTAK BİLGEM 4. Bulut Bilişim ve Büyük Veri Yaz Okulu</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/baskent-ekin.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">21.Mar.16 :: Genel</h4>
                                    <p class="CustomLiP">Başkent Üniversitesi EKİN Ön Kuluçka Merkezi Girişimcilik Proje Yarışması</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='/' target='_parent' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">17.Mar.16 :: Öğrenci</h4>
                                    <p class="CustomLiP">Staj süresi 20 iş gününe düşürülmüştür!</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/iltek-gunleri.jpg' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">01.Mar.16 :: Genel</h4>
                                    <p class="CustomLiP">Yıldız Teknik Üniversitesi 11. İletişim ve Bilişim Teknolojileri Günleri</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://muhendislik.cbu.edu.tr/db_images/file/2015_2016/bahar/dersprogrami/index.html' target='_blank' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">22.Şub.16 :: Öğrenci</h4>
                                    <p class="CustomLiP">Şubeler ve derslik dağılımında değişiklikler yapılmıştır. Yeni ders programı için tıklayınız.</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='/' target='_parent' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">16.Şub.16 :: Öğrenci</h4>
                                    <p class="CustomLiP">Staj evrakları son teslim tarihi 27 Mayıs 2016 Cuma günüdür.</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/yarisma.pdf' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">29.Oca.16 :: Genel</h4>
                                    <p class="CustomLiP">Uludağ Üniversitesi Ar-Ge Günleri ve İyi Fikir
İş Projeleri ve Girişimcilik Yarışması</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilgisayarmuh.cbu.edu.tr/db_images/site_111/file/tev-burs.pdf' target='_blank' title='Öğrenci'>
                                    <h4 class="CustomLiHeader">29.Oca.16 :: Öğrenci</h4>
                                    <p class="CustomLiP">2015-2016 eğitim öğretim yılında Vakıflardan burs alacak öğrencilerimiz (TEV Bursiyerleri)</p>
                                </a>
                            </li>
                        
                            <li class="CustomLi">
                                <a class="CustomNewsLink" href='http://bilmok.org.tr/' target='_blank' title='Genel'>
                                    <h4 class="CustomLiHeader">25.Oca.16 :: Genel</h4>
                                    <p class="CustomLiP">11. Bilgisayar Mühendisliği Öğrencileri Kongresi (BİLMÖK) Türkiye'nin en büyük ulusal öğrenci kongresidir. Bu yıl Harran Üniversites ...</p>
                                </a>
                            </li>
                        
                </ul>
            </div>
            <div style="padding-top: 10px">
                <div style="float: left; width: 80px;">



                    <table class="dxeButtonEditSys dxeButtonEditSysWithSpacing dxeButtonEdit" cellspacing="1" cellpadding="0" id="ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter" style="background-color:#666666;border-style:None;width:200px;">
	<tr>
		<td style="display:none;"><input id="ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter_VI" name="ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter_VI" type="hidden" value="0" /></td><td class="dxic" onmousedown="return aspxDDDropDown(&#39;ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter&#39;, event)" style="width:100%;padding-top:0px;padding-bottom:0px;"><input class="dxeEditArea dxeEditAreaSys" name="ctl00$ContentPlaceHolder1$ucSlider1$ucCustomNewsBlock1$cmbFilter" value="Tümü" id="ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter_I" onchange="aspxETextChanged(&#39;ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter&#39;)" onblur="aspxELostFocus(&#39;ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter&#39;)" onfocus="aspxEGotFocus(&#39;ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter&#39;)" type="text" readonly="readonly" style="background-color:#666666;font-family:Open Sans;cursor:default;" /></td><td id="ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter_B-1" class="dxeButtonEditButton" onmousedown="return aspxDDDropDown(&#39;ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter&#39;, event)" style="font-family:Open Sans;-moz-user-select:none;"><img id="ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter_B-1Img" class="dxEditors_edtDropDown" src="/DXR.axd?r=1_12-yDfd9" alt="v" /></td>
	</tr>
</table><input type="hidden" id="ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter_DDDWS" name="ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter_DDDWS" value="0:0:-1:-10000:-10000:0:-10000:-10000:1:0:0:0" /><div id="ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter_DDD_PW-1" class="dxpc-ddSys dxpclW" style="width:0px;z-index:10000;display:none;">
	<div class="dxpc-mainDiv dxpc-shadow" style="cursor:default;">
		<div class="dxpc-contentWrapper">
			<div class="dxpc-content">
				<table class="dxeListBox" cellspacing="0" cellpadding="0" id="ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter_DDD_L" style="font-family:Open Sans;border-collapse:collapse;border-collapse:separate;">
					<tr>
						<td valign="top"><div id="ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter_DDD_L_D" class="dxlbd" style="width:100%;overflow:auto;">
							<input id="ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter_DDD_L_VI" type="hidden" name="ctl00$ContentPlaceHolder1$ucSlider1$ucCustomNewsBlock1$cmbFilter$DDD$L" /><table id="ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter_DDD_L_LBT" cellspacing="0" cellpadding="0" style="width:100%;border-collapse:collapse;border-collapse:separate;">
								<tr class="dxeListBoxItemRow">
									<td class="dxeListBoxItem" style="font-family:Open Sans;">T&#252;m&#252;</td>
								</tr><tr class="dxeListBoxItemRow">
									<td class="dxeListBoxItem" style="font-family:Open Sans;">Genel ( 97 )</td>
								</tr><tr class="dxeListBoxItemRow">
									<td class="dxeListBoxItem" style="font-family:Open Sans;">&#214;ğrenci ( 27 )</td>
								</tr>
							</table>
						</div></td>
					</tr>
				</table><script id="dxss_2112429377" type="text/javascript">
<!--
aspxAddDisabledItems('ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter_DDD_L',[[['dxeDisabled'],[''],['']]]);

var dxo = new ASPxClientListBox('ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter_DDD_L');
window['ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter_DDD_L'] = dxo;
dxo.uniqueID = 'ctl00$ContentPlaceHolder1$ucSlider1$ucCustomNewsBlock1$cmbFilter$DDD$L';
dxo.SelectedIndexChanged.AddHandler(function (s, e) { aspxCBLBSelectedIndexChanged('ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter', e); });
dxo.ItemClick.AddHandler(function (s, e) { aspxCBLBItemMouseUp('ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter', e); });
dxo.RequireStyleDecoration();
dxo.styleDecoration.AddStyle('F','dxeFocused','');
dxo.savedSelectedIndex = 0;
dxo.itemsValue=[0,1442,1444];
dxo.isComboBoxList = true;
dxo.hoverClasses=['dxeListBoxItemHover'];
dxo.selectedClasses=['dxeListBoxItemSelected'];
dxo.disabledClasses=['dxeDisabled'];
dxo.AfterCreate();

//-->
</script>
			</div>
		</div>
	</div>
</div><script id="dxss_990130968" type="text/javascript">
<!--
aspxAddHoverItems('ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter_DDD',[[['dxpc-closeBtnHover'],[''],['HCB-1']]]);

var dxo = new ASPxClientPopupControl('ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter_DDD');
window['ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter_DDD'] = dxo;
dxo.uniqueID = 'ctl00$ContentPlaceHolder1$ucSlider1$ucCustomNewsBlock1$cmbFilter$DDD';
dxo.Shown.AddHandler(function (s, e) { aspxDDBPCShown('ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter', e); });
dxo.adjustInnerControlsSizeOnShow=false;
dxo.popupAnimationType='slide';
dxo.closeAction='CloseButton';
dxo.popupHorizontalAlign='LeftSides';
dxo.popupVerticalAlign='Below';
dxo.isPopupPositionCorrectionOn=false;
dxo.width=0;
dxo.height=0;
dxo.AfterCreate();

//-->
</script><script id="dxss_51272487" type="text/javascript">
<!--
aspxAddHoverItems('ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter',[[['dxeButtonEditButtonHover'],[''],['B-1']]]);
aspxAddPressedItems('ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter',[[['dxeButtonEditButtonPressed'],[''],['B-1']]]);
document.getElementById("ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter_I").setAttribute("autocomplete", "off");

var dxo = new ASPxClientComboBox('ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter');
window['ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_cmbFilter'] = dxo;
dxo.autoPostBack = true;
dxo.uniqueID = 'ctl00$ContentPlaceHolder1$ucSlider1$ucCustomNewsBlock1$cmbFilter';
dxo.RequireStyleDecoration();
dxo.styleDecoration.AddStyle('F','dxeFocused','');
dxo.lastSuccessValue = 0;
dxo.islastSuccessValueInit = true;
dxo.AfterCreate();

//-->
</script>



                    
                </div>
                <div style="float: right; width: 175px; text-align: right;">
                    <a id="ContentPlaceHolder1_ucSlider1_ucCustomNewsBlock1_hpyAllView" class="NewsAllLnk" href="duyurular.8501.tr.html">TÜM DUYURULAR</a>
                </div>

            </div>


        </div>

    </div>

</div>




        </div>
    </div>
</div>

    </div>
    

    <div class="PagesDiv" id="PageContent">
        <div id="pnlAllControl">
	
            
            
            

            <div id="pnlRowDiv3">
		

                <div id="pnlCol1">
			
                    <div id="pnlDiv5" style="height:100%;">
				
<div class="HtmlMasterDiv">
    
    <div class="HtmlLtrDiv">
            <div class="HeaderBantDiv">
        <h2 class="HeaderBantH">
          PROGRAM HAKKINDA
        </h2>
    </div>
<h3 class="h3Blue">Kuruluş<br/></h3>
<p class="p1" style="text-align: justify;">Programın %100 İngilizce olarak, 2012-2013 öğretim yılında başlamıştır. Programa 40 birinci, 40 ikinci öğretim olmak üzere toplamda 80 öğrenci alınmaktadır.<br/></p>
<h3 class="h3Blue">Kazanılan Derece<br/></h3>
<p class="p1" style="text-align: justify;"> Öğrenciler programdan mezun olduklarında Bilgisayar Mühendisi lisans derecesi kazanmaktadırlar.</p><h3 class="h3Blue">Kabul ve Kayıt Koşulları<br/></h3>
<p class="p1" style="text-align: justify;"> Programa öğrenci kabulü, Yükseköğretim Kurulu (YÖK) &nbsp;tarafından belirlenen düzenlemeler çerçevesinde YGS/LYS&nbsp;üniversite giriş sınavı ile gerçekleştirilmektedir. Uluslararası öğrenciler, SAT, ACT vb uluslar arası sınav sonuçlarına ya da kendi lise diploma notuna göre alan programa kabul edilmektedir. Öğrenci değişimi ile öğrenci kabulü Manisa Celal Bayar Üniversitesi ve ortak üniversite tarafından imzalanan ikili anlaşmalar tarafından belirlenen şartlara göre yapılır. Misafir öğrenciler, ilgili akademik birimin onayı ile bu programda sunulan dersler için kayıt yaptırabilirler. Programda öğretim dili İngilizce olduğundan, öğrencilerden İngilizce dil seviyesini belgelendirmeleri istenmektedir.</p><p><br/></p><p class="p1" style="text-align: right;"><a href="/bolum-hakkinda.9250.tr.html">devamı</a>&nbsp;</p><div style="text-align: right;"></div><p><br/></p>
    </div>
    
</div>







			</div>
                    
                    
                
		</div>

                <div id="pnlCol2">
			

                    <div id="pnlDiv6" style="height:100%;">
				
<div class="HtmlMasterDiv">
    
    <div class="HtmlLtrDiv">
            <div class="HeaderBantDiv">
        <h2 class="HeaderBantH">
          iletişim
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </h2><br/></div><div style="border:1px solid #E1E1E1">
   
<p style="margin-left:10px; text-align:left; font-weight:lighter; color:#666666"><b>Bölüm Sekreteri:</b> İpek Akyol </p>

<p style="margin-left:10px; text-align:left; font-weight:lighter; color:#666666"><b>Öğrenci İşleri:</b> Taylan Tepeli</p>

    <p style="margin-left:10px; text-align:left; font-weight:lighter; color:#666666"><b>Adres &nbsp; : </b>Mühendislik Fakültesi Şehit Prof. Dr. İlhan Varank Yerleşkesi Muradiye-Manisa-Türkiye</p>
    <p style="margin-left:10px; text-align:left; font-weight:lighter; color:#666666"><strong>E-posta &nbsp;: </strong>muhendislik.ogrenci@cbu.edu.tr</p>
</div><br/><p><br/></p>
    </div>
    
</div>







			</div>
                    
                    
                
		</div>

            
	</div>
            
            
            
            
            
            
        
</div>
        <div class="DivEnd">
            
        </div>
    </div>
    


<nav class="main-menu">
<div>
    <a class="logo" href="http://www.cbu.edu.tr"><img src="http://lib.cbu.edu.tr/images/solmenu/cbutr.png"/></a> 
</div> 
<div class="settings"></div>
<div class="solmenubar" id="style-1">
<ul>
<li>                                   
<a href="http://bilgisayarmuh.cbu.edu.tr">
<i><img src="http://lib.cbu.edu.tr/images/solmenu/home.png" width="26" height="26" alt=""/></i>
<span class="nav-text">Anasayfa</span>
</a>
</li>   
<li>                                 
<a href="http://uygulama2.cbu.edu.tr/dbrehber/default.aspx?Aranacak=Mühendislik Fakültesi bilgisayar" target="_blank">
<i><img src="http://lib.cbu.edu.tr/images/solmenu/Phone.png" width="26" height="26" alt=""/></i>
<span class="nav-text">Telefon Rehberi</span>
</a>
</li>
<li>
<a href="http://bilgisayarmuh.cbu.edu.tr/baskana-mesaj.8815.tr.html">
<i><img src="http://lib.cbu.edu.tr/images/solmenu/messages.png" width="26" height="26" alt=""/></i>
 <span class="nav-text">Yetkili'ye Mesaj</span>
</a>
</li> 
<li>
<a href="http://ubs.cbu.edu.tr" target="_blank">
<i><img src="http://lib.cbu.edu.tr/images/solmenu/ubs.png" width="26" height="26" alt=""/></i>
<span class="nav-text">UBS</span>
</a>
</li>
  
<li>
<a href="https://www.facebook.com/bayaredutr" target="_blank">
<i><img src="http://lib.cbu.edu.tr/images/solmenu/face.png" width="26" height="26" alt=""/></i>
<span class="nav-text">Facebook</span>
</a>
</li>
<li>
<a href="https://www.youtube.com/user/cbubasin" target="_blank">
<i><img src="http://lib.cbu.edu.tr/images/solmenu/youtube.png" width="26" height="26" alt=""/></i>
<span class="nav-text">Youtube</span>
</a>
</li>
<li>
<a href="https://twitter.com/bayaredutr" target="_blank">
<i><img src="http://lib.cbu.edu.tr/images/solmenu/twitter.png" width="26" height="26" alt=""/></i>
<span class="nav-text">Twitter</span>
</a>
</li>
<li>
<a href="https://instagram.com/cbubasin/" target="_blank">
<i><img src="http://lib.cbu.edu.tr/images/solmenu/instagram.png" width="26" height="26" alt=""/></i>
<span class="nav-text">Instagram</span>
</a>
</li>
</ul>
</div></nav>


                </div>
                
            </div>
            <div class="FooterLinkBlok">
                <div class="FooterLinkBlokDiv">
                   

<div class="linkblockImgDiv">
    <ul class="linkblockImgUl">
        
    </ul>
</div>


                </div>
            </div>
            <div class="footer">
                <div class="Box1170">
                    <div style="width: 240px; min-height: 50px; float: left;">
                        <h4 class="H4Footer">
                            Üniversitemiz</h4>
                        

<ul class="RptUl">
    
            <li class="RptLi">
                <a id="ucNavigations1_rptNav_HyperLink1_0" class="RptHypItem" href="http://basin.cbu.edu.tr/cbu_tanitim/" target="_blank">CBÜ Tanıtım Kılavuzu</a>
            </li>
        
</ul>

                    </div>
                    <div style="width: 240px; min-height: 50px; float: left; margin-left: 20px; padding-left:30px; border-left-style: solid; border-left-width: 1px; border-left-color: #C0C0C0;">
                        <h4 class="H4Footer">
                            Öğrenci İşleri</h4>
                        

<ul class="RptUl">
    
            <li class="RptLi">
                <a id="ucNavigations2_rptNav_HyperLink1_0" class="RptHypItem" href="http://ogrenciisleri.cbu.edu.tr" target="_blank">Öğrenci İşleri</a>
            </li>
        
</ul>

                    </div>

                    <div style="width: 297px; min-height: 50px; float: left; margin-left: 20px; padding-left:30px; border-left-style: solid; border-left-width: 1px; border-left-color: #C0C0C0;">
                        <div id="ucNewsletters1_cbpNwltr">
	
            <h4 class="H4Footer">
                Bizi Takip Edin
            </h4>
            <p class="Lbl13Color2" style="padding-top: 15px;">
                Haber Bültenine katılmak istiyorsanız aşaıdaki kutucuğa E-Posta adresinizi girip gönder butonuna basınız.
            </p>
            <div style="width: 262px; display: table;">
                
<div class="socialMasterDiv">    
    <ul>
        
                <li class="socialLnkLi">
                    <a id="ucNewsletters1_cbpNwltr_ucSocialLinks1_rptSocial_HyperLink1_0" title="Facebook" class="sociallnk" href="http://www.facebook.com/bayaredutr" target="_blank"><img title="Facebook" src="db_images/social/1121-icon.png" alt="" /></a>
                </li>
            
    </ul>
</div>

            </div>
            <p class="Lbl13Color2" style="padding-top: 15px; padding-bottom: 10px;">
                Haber Listemize Katılın ...
            </p>
            <div id="ucNewsletters1_cbpNwltr_Panel1" style="width:280px;">
		

                <div>
                    <input type="hidden" id="ucNewsletters1_cbpNwltr_txtEmail_Raw" name="ucNewsletters1_cbpNwltr_txtEmail_Raw" value="" /><table id="ucNewsletters1_cbpNwltr_txtEmail_ET" class="dxeErrorFrame" cellspacing="0" cellpadding="0" style="border-collapse:collapse;visibility:hidden;">
			<tr>
				<td class="dxeControlsCell" style="visibility:visible;"><table class="dxeTextBoxSys dxeTextBox" cellspacing="0" cellpadding="0" id="ucNewsletters1_cbpNwltr_txtEmail" style="background-color:White;border-color:Silver;border-width:1px;border-style:Solid;width:250px;border-collapse:collapse;">
					<tr>
						<td class="dxic" style="width:100%;padding-left:5px;padding-right:5px;padding-top:4px;padding-bottom:4px;"><input class="dxeEditArea dxeEditAreaSys" name="ctl00$ucNewsletters1$cbpNwltr$txtEmail" onkeyup="aspxEKeyUp(&#39;ucNewsletters1_cbpNwltr_txtEmail&#39;, event)" value="E-Posta Adresiniz?" id="ucNewsletters1_cbpNwltr_txtEmail_I" onchange="aspxEValueChanged(&#39;ucNewsletters1_cbpNwltr_txtEmail&#39;)" onblur="aspxELostFocus(&#39;ucNewsletters1_cbpNwltr_txtEmail&#39;)" onfocus="aspxEGotFocus(&#39;ucNewsletters1_cbpNwltr_txtEmail&#39;)" type="text" style="color:#333333;background-color:White;" /></td>
					</tr>
				</table></td>
			</tr><tr>
				<td id="ucNewsletters1_cbpNwltr_txtEmail_EC" class="dxeErrorCell" style="color:#DE2A2A;"><table cellspacing="0" cellpadding="0" style="width:100%;border-collapse:collapse;">
					<tr>
						<td style="padding-right:5px;"><img id="ucNewsletters1_cbpNwltr_txtEmail_EI" class="dxEditors_edtError" src="/DXR.axd?r=1_12-yDfd9" alt="" /></td><td id="ucNewsletters1_cbpNwltr_txtEmail_ETC" style="color:#DE2A2A;width:100%;white-space:nowrap;">Ge&#231;ersiz E-Posta !</td>
					</tr>
				</table></td>
			</tr>
		</table><script id="dxss_1902768038" type="text/javascript">
<!--
document.getElementById("ucNewsletters1_cbpNwltr_txtEmail_ET").setAttribute("errorFrame", "errorFrame");
document.getElementById("ucNewsletters1_cbpNwltr_txtEmail_I").setAttribute("autocomplete", "off");

var dxo = new ASPxClientTextBox('ucNewsletters1_cbpNwltr_txtEmail');
window['ucNewsletters1_cbpNwltr_txtEmail'] = dxo;
dxo.uniqueID = 'ctl00$ucNewsletters1$cbpNwltr$txtEmail';
dxo.validationGroup = "GrpEm";
dxo.customValidationEnabled = true;
dxo.isValid = true;
dxo.errorText = 'Geçersiz E-Posta !';
dxo.validationPatterns = [ new ASPxRequiredFieldValidationPattern('E-Posta Adresinizi Giriniz !'), new ASPxRegularExpressionValidationPattern('Geçersiz E-Posta !', '\\w+([-+.\']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*') ];
dxo.errorImageIsAssigned = true;
dxo.RequireStyleDecoration();
dxo.styleDecoration.AddStyle('I','dxeInvalid','');
dxo.styleDecoration.AddStyle('F','dxeFocused','');
dxo.styleDecoration.AddStyle('N','dxeNullText','color:Silver;font-family:Tahoma;font-style:italic;');
dxo.nullText = 'E-Posta Adresiniz?';
dxo.AfterCreate();

//-->
</script>
                </div>

                <div style="width: 65px; padding-top: 3px;">
                    <a class="dxeHyperlink_None HpyBtnColor1" onclick="return aspxSEClick(&#39;ucNewsletters1_cbpNwltr_hpySend&#39;, event)" id="ucNewsletters1_cbpNwltr_hpySend" style="width:65px;display:inline-block;">G&#214;NDER</a><script id="dxss_768289278" type="text/javascript">
<!--
aspxAddDisabledItems('ucNewsletters1_cbpNwltr_hpySend',[[['dxeDisabled_None'],[''],['']]]);

var dxo = new ASPxClientHyperLink('ucNewsletters1_cbpNwltr_hpySend');
window['ucNewsletters1_cbpNwltr_hpySend'] = dxo;
dxo.uniqueID = 'ctl00$ucNewsletters1$cbpNwltr$hpySend';
dxo.Click.AddHandler(function(s, e) {
	if (ASPxClientEdit.ValidateGroup('GrpEm'))
	{
   		 cbpNwltr.PerformCallback('AddE');
	}
});
dxo.AfterCreate();

//-->
</script>
                </div>

            
	</div>
            
        
</div><script id="dxss_2064232721" type="text/javascript">
<!--

var dxo = new ASPxClientCallbackPanel('ucNewsletters1_cbpNwltr');
window['cbpNwltr'] = dxo;
dxo.callBack = function(arg) { WebForm_DoCallback('ctl00$ucNewsletters1$cbpNwltr',arg,aspxCallback,'ucNewsletters1_cbpNwltr',aspxCallbackError,true); };
dxo.uniqueID = 'ctl00$ucNewsletters1$cbpNwltr';
dxo.hideContentOnCallback=false;
dxo.AfterCreate();

//-->
</script>


                    </div>
                    <div style="width: 240px; min-height: 50px; float: left; margin-left: 20px; padding-left:30px; border-left-style: solid; border-left-width: 1px; border-left-color: #C0C0C0;">
                        <h4 class="H4Footer">
                            İletişim</h4>
                        

<ul class="RptUl">
    
            <li class="RptLi">
                <a id="ucNavigations3_rptNav_HyperLink1_0" class="RptHypItem" href="http://eposta.cbu.edu.tr/" target="_blank">CBÜ E-Posta</a>
            </li>
        
</ul>

                    </div>
                </div>
            </div>

            <div class="footer2">
                <div class="Box11702">
                    <div style="width: 800px; height: 20px; float: left; padding-top: 3px;">
                        <span id="AdLabel2" class="Lbl14Color1">Celal Bayar Üniversitesi © 2014 | </span>
                                <a id="hypLnkPrivacy" class="HypPrivacy" href="gizlilik-ve-veri-politikalari.2.tr.html">Güvenlik ve Gizlilik</a>
                    </div>
                    <div style="width: 105px; height: 20px; float: right; padding-top: 5px;">
                     
                    </div>
                </div>
            </div>

            
            <a href="#" class="scrollup">Scroll</a>

            

            

            

        </div>

    

<script type="text/javascript">
//<![CDATA[

WebForm_InitCallback();//]]>
</script>
</form>
</body>
</html>
'